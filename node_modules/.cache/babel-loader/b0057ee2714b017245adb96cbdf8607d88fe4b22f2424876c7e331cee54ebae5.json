{"ast":null,"code":"var _jsxFileName = \"/Users/hipl/Documents/Tasks/chatApp/chatFrontend/my-app/src/ChatRoomPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { io } from \"socket.io-client\";\nimport \"./ChatRoomPage.css\";\n\n// Initialize Socket.IO client\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:4000\");\nconst ChatRoomPage = () => {\n  _s();\n  const {\n    roomID\n  } = useParams(); // Get room ID from URL\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [username, setUsername] = useState(\"User\"); // Simulate user username\n\n  // Listen for incoming messages\n  useEffect(() => {\n    socket.on(\"receiveMessage\", newMessage => {\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n    });\n    return () => {\n      socket.off(\"receiveMessage\");\n    };\n  }, []);\n  const sendMessage = () => {\n    if (message.trim()) {\n      // Emit the message to the server\n      socket.emit(\"sendMessage\", {\n        roomID,\n        username,\n        message\n      });\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"You\",\n        text: message\n      }]);\n      setMessage(\"\"); // Clear the input field\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Chat Room: \", roomID]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.sender, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), \" \", msg.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoomPage, \"y0GS0hMOWVkXD/njmZYktoLONmQ=\", false, function () {\n  return [useParams];\n});\n_c = ChatRoomPage;\nexport default ChatRoomPage;\nvar _c;\n$RefreshReg$(_c, \"ChatRoomPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","io","jsxDEV","_jsxDEV","socket","ChatRoomPage","_s","roomID","messages","setMessages","message","setMessage","username","setUsername","on","newMessage","prevMessages","off","sendMessage","trim","emit","sender","text","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/hipl/Documents/Tasks/chatApp/chatFrontend/my-app/src/ChatRoomPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { io } from \"socket.io-client\";\nimport \"./ChatRoomPage.css\";\n\n// Initialize Socket.IO client\nconst socket = io(\"http://localhost:4000\");\n\nconst ChatRoomPage = () => {\n  const { roomID } = useParams(); // Get room ID from URL\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [username, setUsername] = useState(\"User\"); // Simulate user username\n\n  // Listen for incoming messages\n  useEffect(() => {\n    socket.on(\"receiveMessage\", (newMessage) => {\n      setMessages((prevMessages) => [...prevMessages, newMessage]);\n    });\n\n    return () => {\n      socket.off(\"receiveMessage\");\n    };\n  }, []);\n\n  const sendMessage = () => {\n    if (message.trim()) {\n      // Emit the message to the server\n      socket.emit(\"sendMessage\", { roomID, username, message });\n      setMessages((prevMessages) => [...prevMessages, { sender: \"You\", text: message }]);\n      setMessage(\"\"); // Clear the input field\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <h2>Chat Room: {roomID}</h2>\n      <div className=\"chat-messages\">\n        {messages.map((msg, index) => (\n          <div key={index}>\n            <strong>{msg.sender}:</strong> {msg.text}\n          </div>\n        ))}\n      </div>\n      <div className=\"chat-input\">\n        <input\n          type=\"text\"\n          placeholder=\"Type your message...\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n        />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatRoomPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAO,oBAAoB;;AAE3B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAGH,EAAE,CAAC,uBAAuB,CAAC;AAE1C,MAAMI,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAO,CAAC,GAAGP,SAAS,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;;EAElD;EACAC,SAAS,CAAC,MAAM;IACdK,MAAM,CAACU,EAAE,CAAC,gBAAgB,EAAGC,UAAU,IAAK;MAC1CN,WAAW,CAAEO,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAED,UAAU,CAAC,CAAC;IAC9D,CAAC,CAAC;IAEF,OAAO,MAAM;MACXX,MAAM,CAACa,GAAG,CAAC,gBAAgB,CAAC;IAC9B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIR,OAAO,CAACS,IAAI,CAAC,CAAC,EAAE;MAClB;MACAf,MAAM,CAACgB,IAAI,CAAC,aAAa,EAAE;QAAEb,MAAM;QAAEK,QAAQ;QAAEF;MAAQ,CAAC,CAAC;MACzDD,WAAW,CAAEO,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE;QAAEK,MAAM,EAAE,KAAK;QAAEC,IAAI,EAAEZ;MAAQ,CAAC,CAAC,CAAC;MAClFC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;IAClB;EACF,CAAC;EAED,oBACER,OAAA;IAAKoB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BrB,OAAA;MAAAqB,QAAA,GAAI,aAAW,EAACjB,MAAM;IAAA;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC5BzB,OAAA;MAAKoB,SAAS,EAAC,eAAe;MAAAC,QAAA,EAC3BhB,QAAQ,CAACqB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvB5B,OAAA;QAAAqB,QAAA,gBACErB,OAAA;UAAAqB,QAAA,GAASM,GAAG,CAACT,MAAM,EAAC,GAAC;QAAA;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACE,GAAG,CAACR,IAAI;MAAA,GADhCS,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNzB,OAAA;MAAKoB,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzBrB,OAAA;QACE6B,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,sBAAsB;QAClCC,KAAK,EAAExB,OAAQ;QACfyB,QAAQ,EAAGC,CAAC,IAAKzB,UAAU,CAACyB,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC,eACFzB,OAAA;QAAQmC,OAAO,EAAEpB,WAAY;QAAAM,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACtB,EAAA,CA/CID,YAAY;EAAA,QACGL,SAAS;AAAA;AAAAuC,EAAA,GADxBlC,YAAY;AAiDlB,eAAeA,YAAY;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}