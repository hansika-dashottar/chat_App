{"ast":null,"code":"var _jsxFileName = \"/Users/hipl/Documents/Tasks/chatApp/chatFrontend/my-app/src/ChatApp.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input ka state\n//   const [messages, setMessages] = useState([]); // Messages list ka state\n\n//   // Message send karne ka function\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, message]); // Message ko list me add karo\n//       setMessage(\"\"); // Input field ko clear karo\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat with John Doe</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to the backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Input message state\n//   const [messages, setMessages] = useState([]); // Messages list state\n\n//   // Load initial messages from the backend\n//   useEffect(() => {\n//     fetch(\"http://localhost:4000/api\")\n//       .then((response) => response.json())\n//       .then((data) => setMessages(data.messages || []))\n//       .catch((err) => console.error(\"Error fetching messages:\", err));\n//   }, []);\n\n//   // Listen for incoming messages via Socket.IO\n//   useEffect(() => {\n//     socket.on(\"messageResponse\", (data) => {\n//       console.log(data)\n//       setMessages((prevMessages) => [...prevMessages, JSON.parse(data)]);\n//     });\n\n//     return () => {\n//       socket.off(\"messageResponse\");\n//     };\n//   }, []);\n\n//   // Function to send a new message\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       const messageData = JSON.stringify({ text: message, timestamp: Date.now()});\n//       socket.emit(\"message\", messageData); // Send message to the backend\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat Application</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg.text} <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString()}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"Other\", text: newMessage }]);\n//     });\n\n//     // Clean up the listener when component unmounts\n//     return () => socket.off(\"receiveMessage\");\n//   }, []);\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"You\", text: message }]);\n//       socket.emit(\"sendMessage\", message); // Emit message to the server\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">\n//         <h2>Basic Chat App</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className={msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\"}>\n//             <strong>{msg.sender}:</strong> {msg.text}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\");\n\n// const ChatApp = () => {\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID input\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"Other\", text: newMessage },\n//       ]);\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//     };\n//   }, []);\n\n//   // Join a room\n//   const joinRoom = () => {\n//     if (roomID.trim()) {\n//       socket.emit(\"joinRoom\", roomID);\n//       setIsInRoom(true); // Mark user as in a room\n//     }\n//   };\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n//       socket.emit(\"sendMessage\", { roomID, message }); // Emit message with room ID\n//       setMessage(\"\"); // Clear input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Room ID</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, newMessage]);\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} created room with ID: ${roomID}`);\n//     });\n\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} joined room: ${roomID}`);\n//     });\n\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, []);\n\n//   // Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       socket.emit(\"createRoom\", username); // Request the server to create a room\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       socket.emit(\"joinRoom\", { roomID, username }); // Request to join the room\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       socket.emit(\"sendMessage\", { roomID, username, message }); // Send message to the server\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n//       setMessage(\"\"); // Clear input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n//Important\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       // Prevent adding the sender's message again\n//       if (newMessage.sender !== username) {\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       }\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} created room with ID: ${roomID}`);\n//     });\n\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} joined room: ${roomID}`);\n//     });\n\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, [username]);\n\n//   // Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       socket.emit(\"createRoom\", username); // Request the server to create a room\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       socket.emit(\"joinRoom\", { roomID, username }); // Request to join the room\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       // Add the message to the sender's local chat history\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n\n//       // Emit the message to the server\n//       socket.emit(\"sendMessage\", { roomID, username, message });\n\n//       // Clear the input field\n//       setMessage(\"\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n//---------------Important-----------------//\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// // Initialize Socket.IO client\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming events from the backend\n//   useEffect(() => {\n//     // Event: New message received\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       if (newMessage.sender !== username) {\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       }\n//     });\n\n//     // Event: System messages\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     // Event: Room created\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       console.log(\"Room created successfully:\", { roomID, username });\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Room joined\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       console.log(`${username} joined room: ${roomID}`);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Error messages\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     // Cleanup listeners on component unmount\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, [username]);\n\n//   // Function: Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       console.log(\"Requesting room creation for:\", username);\n//       socket.emit(\"createRoom\", username);\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Function: Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       console.log(`Requesting to join room ${roomID} as ${username}`);\n//       socket.emit(\"joinRoom\", { roomID, username });\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Function: Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       // Add the message to the sender's local chat history\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n\n//       // Emit the message to the server\n//       socket.emit(\"sendMessage\", { roomID, username, message });\n\n//       // Clear the input field\n//       setMessage(\"\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [isSignup, setIsSignup] = useState(false);\n//   const [isLogin, setIsLogin] = useState(false);\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [username, setUsername] = useState(\"\");\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [loginEmail, setLoginEmail] = useState(\"\");\n//   const [loginPassword, setLoginPassword] = useState(\"\");\n//   const [activeUser, setActiveUser] = useState(null);\n//   const [message, setMessage] = useState(\"\");\n//   const [messages, setMessages] = useState({});\n//   const [groupName, setGroupName] = useState(\"\");\n//   const [selectedUsers, setSelectedUsers] = useState([]);\n//   const [groups, setGroups] = useState([]);\n//   const [isCreatingGroup, setIsCreatingGroup] = useState(false);\n\n//   const users = [\"Piyush\", \"Ankita\", \"Charlie\", \"David\", \"Jerry\"]; // Dummy user list\n\n//   // Handle signup submission\n//   const handleSignupSubmit = () => {\n//     if (username.trim() && email.trim() && password.trim()) {\n//       alert(`Signup successful for ${username}!`);\n//       setIsSignup(false);\n//     } else {\n//       alert(\"Please fill all fields for Signup!\");\n//     }\n//   };\n\n//   // Handle login submission\n//   const handleLoginSubmit = () => {\n//     if (loginEmail.trim() && loginPassword.trim()) {\n//       alert(`Login successful for ${loginEmail}!`);\n//       setIsLoggedIn(true);\n//       setIsLogin(false);\n//     } else {\n//       alert(\"Please fill all fields for Login!\");\n//     }\n//   };\n\n//   // Handle sending a message\n//   const handleSendMessage = () => {\n//     if (message.trim() && (activeUser || groups.length > 0)) {\n//       const target = activeUser || groups[activeUser]; // If no active user, chat in group\n//       setMessages((prevMessages) => ({\n//         ...prevMessages,\n//         [target]: [...(prevMessages[target] || []), { sender: \"You\", text: message }],\n//       }));\n//       setMessage(\"\");\n//     }\n//   };\n\n//   // Handle group creation\n//   const handleCreateGroup = () => {\n//     if (groupName.trim() && selectedUsers.length > 0) {\n//       const newGroup = { groupName, users: selectedUsers };\n//       setGroups([...groups, newGroup]);\n//       setIsCreatingGroup(false);\n//       setGroupName(\"\");\n//       setSelectedUsers([]);\n//     } else {\n//       alert(\"Please provide a group name and select users.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isLoggedIn ? (\n//         <>\n//           {!isSignup && !isLogin ? (\n//             <div className=\"welcome-container\">\n//               <h1>Welcome to ChatApp</h1>\n//               <div className=\"button-group\">\n//                 <button onClick={() => setIsSignup(true)}>Signup</button>\n//                 <button onClick={() => setIsLogin(true)}>Login</button>\n//               </div>\n//             </div>\n//           ) : isSignup ? (\n//             <div className=\"form-container\">\n//               <h2>Signup</h2>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Enter your name\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//               />\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"Enter your email\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//               <input\n//                 type=\"password\"\n//                 placeholder=\"Enter your password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//               />\n//               <button onClick={handleSignupSubmit}>Submit</button>\n//             </div>\n//           ) : (\n//             <div className=\"form-container\">\n//               <h2>Login</h2>\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"Enter your email\"\n//                 value={loginEmail}\n//                 onChange={(e) => setLoginEmail(e.target.value)}\n//               />\n//               <input\n//                 type=\"password\"\n//                 placeholder=\"Enter your password\"\n//                 value={loginPassword}\n//                 onChange={(e) => setLoginPassword(e.target.value)}\n//               />\n//               <button onClick={handleLoginSubmit}>Submit</button>\n//             </div>\n//           )}\n//         </>\n//       ) : (\n//         <div className=\"main-container\">\n//           <div className=\"user-list\">\n//             <h3>Users</h3>\n//             {users.map((user) => (\n//               <div\n//                 key={user}\n//                 className={`user ${activeUser === user ? \"active\" : \"\"}`}\n//                 onClick={() => setActiveUser(user)}\n//               >\n//                 {user}\n//               </div>\n//             ))}\n//             <button onClick={() => setIsCreatingGroup(true)}>Create Group</button>\n//           </div>\n//           <div className=\"chat-screen\">\n//             {isCreatingGroup && (\n//               <div className=\"group-creation\">\n//                 <h3>Create a Group</h3>\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Group Name\"\n//                   value={groupName}\n//                   onChange={(e) => setGroupName(e.target.value)}\n//                 />\n//                 <div className=\"user-selection\">\n//                   {users.map((user) => (\n//                     <div key={user}>\n//                       <input\n//                         type=\"checkbox\"\n//                         checked={selectedUsers.includes(user)}\n//                         onChange={() =>\n//                           setSelectedUsers((prev) =>\n//                             prev.includes(user)\n//                               ? prev.filter((u) => u !== user)\n//                               : [...prev, user]\n//                           )\n//                         }\n//                       />\n//                       {user}\n//                     </div>\n//                   ))}\n//                 </div>\n//                 <button onClick={handleCreateGroup}>Create Group</button>\n//               </div>\n//             )}\n\n//             {activeUser || groups.length > 0 ? (\n//               <>\n//                 <h3>{activeUser ? `Chat with ${activeUser}` : \"Chat in Group\"}</h3>\n//                 <div className=\"messages\">\n//                   {(messages[activeUser] || []).map((msg, index) => (\n//                     <div key={index} className={msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\"}>\n//                       <strong>{msg.sender}:</strong> {msg.text}\n//                     </div>\n//                   ))}\n//                 </div>\n//                 <div className=\"chat-input\">\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Type a message\"\n//                     value={message}\n//                     onChange={(e) => setMessage(e.target.value)}\n//                   />\n//                   <div className=\"chat-button\">\n//                     <button onClick={handleSendMessage}>Send</button>\n//                   </div>\n//                 </div>\n//               </>\n//             ) : (\n//               <h3>Select a user or group to start chatting</h3>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./ChatApp.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  const [isSignup, setIsSignup] = useState(false);\n  const [isLogin, setIsLogin] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [activeUser, setActiveUser] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState({});\n  const [users, setUsers] = useState([]); // State for user list\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [showGroupModal, setShowGroupModal] = useState(false); // Modal state\n  const [selectedUsers, setSelectedUsers] = useState([]); // State for selected users\n  const [groups, setGroups] = useState([]); // State for groups\n\n  // Fetch users from the API\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const response = await fetch(\"https://675914d260576a194d130185.mockapi.io/api/v1/Users\"); // Replace with your API endpoint\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch users\");\n        }\n        const data = await response.json();\n        setUsers(data);\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    fetchUsers();\n  }, []);\n\n  // Handle signup submission\n  const handleSignupSubmit = () => {\n    if (username.trim() && email.trim() && password.trim()) {\n      alert(`Signup successful for ${username}!`);\n      setIsSignup(false);\n    } else {\n      alert(\"Please fill all fields for Signup!\");\n    }\n  };\n\n  // Handle login submission\n  const handleLoginSubmit = () => {\n    if (username.trim() && email.trim()) {\n      alert(`Login successful for ${username}!`);\n      setIsLoggedIn(true);\n      setIsLogin(false);\n    } else {\n      alert(\"Please fill all fields for Login!\");\n    }\n  };\n\n  // Handle sending a message\n  const handleSendMessage = () => {\n    if (message.trim() && activeUser) {\n      setMessages(prevMessages => ({\n        ...prevMessages,\n        [activeUser]: [...(prevMessages[activeUser] || []), {\n          sender: \"You\",\n          text: message\n        }]\n      }));\n      setMessage(\"\");\n    }\n  };\n\n  // Handle user selection for group\n  const toggleUserSelection = userId => {\n    setSelectedUsers(prevSelected => prevSelected.includes(userId) ? prevSelected.filter(id => id !== userId) : [...prevSelected, userId]);\n  };\n\n  // Handle group creation\n  const handleCreateGroup = () => {\n    if (selectedUsers.length > 0) {\n      setGroups(prevGroups => [...prevGroups, {\n        id: groups.length + 1,\n        members: selectedUsers\n      }]);\n      alert(\"Group created successfully!\");\n      setSelectedUsers([]);\n      setShowGroupModal(false);\n    } else {\n      alert(\"Please select at least one user to create a group!\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: !isLoggedIn ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: !isSignup && !isLogin ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"welcome-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Welcome to ChatApp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1078,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setIsSignup(true),\n            children: \"Signup\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1080,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setIsLogin(true),\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1081,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1079,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1077,\n        columnNumber: 13\n      }, this) : isSignup ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Signup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1086,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter your name\",\n          value: username,\n          onChange: e => setUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1087,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Enter your email\",\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1093,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Enter your password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1099,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSignupSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1105,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1085,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1109,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter your name\",\n          value: username,\n          onChange: e => setUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1110,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Enter your email\",\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1116,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLoginSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1122,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1108,\n        columnNumber: 13\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1129,\n          columnNumber: 3\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1131,\n          columnNumber: 5\n        }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"red\"\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1133,\n          columnNumber: 5\n        }, this) : users.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n          // Use a unique key like `id`\n          className: `user ${activeUser === user.id ? \"active\" : \"\"}` // Compare using a unique identifier\n          ,\n          onClick: () => setActiveUser(user.id) // Use user.id to set activeUser\n          ,\n          children: [user.name, \" \", / Display user properties /]\n        }, user.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1136,\n          columnNumber: 7\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowGroupModal(true),\n          children: \"Create Group\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1145,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1128,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-screen\",\n        children: activeUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Chat with \", activeUser]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1151,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages\",\n            children: (messages[activeUser] || []).map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [msg.sender, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1162,\n                columnNumber: 23\n              }, this), \" \", msg.text]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1154,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1152,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Type a message\",\n              value: message,\n              onChange: e => setMessage(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1167,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleSendMessage,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1173,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1166,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select a user to start chatting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1177,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1148,\n        columnNumber: 11\n      }, this), showGroupModal && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Create a Group\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1183,\n          columnNumber: 15\n        }, this), users.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedUsers.includes(user.id),\n              onChange: () => toggleUserSelection(user.id) // Pass user.id instead of the object\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1187,\n              columnNumber: 7\n            }, this), user.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1186,\n            columnNumber: 5\n          }, this)\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1185,\n          columnNumber: 3\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCreateGroup,\n          children: \"Create Group\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1197,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowGroupModal(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1198,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1182,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1127,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1073,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"tKlonTyByZPRMufQwqi3s3IQnYw=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatApp","_s","isSignup","setIsSignup","isLogin","setIsLogin","isLoggedIn","setIsLoggedIn","username","setUsername","email","setEmail","password","setPassword","activeUser","setActiveUser","message","setMessage","messages","setMessages","users","setUsers","loading","setLoading","error","setError","showGroupModal","setShowGroupModal","selectedUsers","setSelectedUsers","groups","setGroups","fetchUsers","response","fetch","ok","Error","data","json","err","handleSignupSubmit","trim","alert","handleLoginSubmit","handleSendMessage","prevMessages","sender","text","toggleUserSelection","userId","prevSelected","includes","filter","id","handleCreateGroup","length","prevGroups","members","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","style","color","map","user","name","msg","index","checked","_c","$RefreshReg$"],"sources":["/Users/hipl/Documents/Tasks/chatApp/chatFrontend/my-app/src/ChatApp.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input ka state\n//   const [messages, setMessages] = useState([]); // Messages list ka state\n\n//   // Message send karne ka function\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, message]); // Message ko list me add karo\n//       setMessage(\"\"); // Input field ko clear karo\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat with John Doe</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to the backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Input message state\n//   const [messages, setMessages] = useState([]); // Messages list state\n\n//   // Load initial messages from the backend\n//   useEffect(() => {\n//     fetch(\"http://localhost:4000/api\")\n//       .then((response) => response.json())\n//       .then((data) => setMessages(data.messages || []))\n//       .catch((err) => console.error(\"Error fetching messages:\", err));\n//   }, []);\n\n//   // Listen for incoming messages via Socket.IO\n//   useEffect(() => {\n//     socket.on(\"messageResponse\", (data) => {\n//       console.log(data)\n//       setMessages((prevMessages) => [...prevMessages, JSON.parse(data)]);\n//     });\n\n//     return () => {\n//       socket.off(\"messageResponse\");\n//     };\n//   }, []);\n\n//   // Function to send a new message\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       const messageData = JSON.stringify({ text: message, timestamp: Date.now()});\n//       socket.emit(\"message\", messageData); // Send message to the backend\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat Application</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg.text} <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString()}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"Other\", text: newMessage }]);\n//     });\n\n//     // Clean up the listener when component unmounts\n//     return () => socket.off(\"receiveMessage\");\n//   }, []);\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"You\", text: message }]);\n//       socket.emit(\"sendMessage\", message); // Emit message to the server\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">\n//         <h2>Basic Chat App</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className={msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\"}>\n//             <strong>{msg.sender}:</strong> {msg.text}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\");\n\n// const ChatApp = () => {\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID input\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"Other\", text: newMessage },\n//       ]);\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//     };\n//   }, []);\n\n//   // Join a room\n//   const joinRoom = () => {\n//     if (roomID.trim()) {\n//       socket.emit(\"joinRoom\", roomID);\n//       setIsInRoom(true); // Mark user as in a room\n//     }\n//   };\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n//       socket.emit(\"sendMessage\", { roomID, message }); // Emit message with room ID\n//       setMessage(\"\"); // Clear input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Room ID</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, newMessage]);\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} created room with ID: ${roomID}`);\n//     });\n\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} joined room: ${roomID}`);\n//     });\n\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, []);\n\n//   // Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       socket.emit(\"createRoom\", username); // Request the server to create a room\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       socket.emit(\"joinRoom\", { roomID, username }); // Request to join the room\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       socket.emit(\"sendMessage\", { roomID, username, message }); // Send message to the server\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n//       setMessage(\"\"); // Clear input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n//Important\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       // Prevent adding the sender's message again\n//       if (newMessage.sender !== username) {\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       }\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} created room with ID: ${roomID}`);\n//     });\n\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} joined room: ${roomID}`);\n//     });\n\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, [username]);\n\n//   // Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       socket.emit(\"createRoom\", username); // Request the server to create a room\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       socket.emit(\"joinRoom\", { roomID, username }); // Request to join the room\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       // Add the message to the sender's local chat history\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n\n//       // Emit the message to the server\n//       socket.emit(\"sendMessage\", { roomID, username, message });\n\n//       // Clear the input field\n//       setMessage(\"\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n\n//---------------Important-----------------//\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// // Initialize Socket.IO client\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming events from the backend\n//   useEffect(() => {\n//     // Event: New message received\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       if (newMessage.sender !== username) {\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       }\n//     });\n\n//     // Event: System messages\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     // Event: Room created\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       console.log(\"Room created successfully:\", { roomID, username });\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Room joined\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       console.log(`${username} joined room: ${roomID}`);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Error messages\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     // Cleanup listeners on component unmount\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, [username]);\n\n//   // Function: Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       console.log(\"Requesting room creation for:\", username);\n//       socket.emit(\"createRoom\", username);\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Function: Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       console.log(`Requesting to join room ${roomID} as ${username}`);\n//       socket.emit(\"joinRoom\", { roomID, username });\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Function: Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       // Add the message to the sender's local chat history\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n\n//       // Emit the message to the server\n//       socket.emit(\"sendMessage\", { roomID, username, message });\n\n//       // Clear the input field\n//       setMessage(\"\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n\n// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [isSignup, setIsSignup] = useState(false);\n//   const [isLogin, setIsLogin] = useState(false);\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [username, setUsername] = useState(\"\");\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [loginEmail, setLoginEmail] = useState(\"\");\n//   const [loginPassword, setLoginPassword] = useState(\"\");\n//   const [activeUser, setActiveUser] = useState(null);\n//   const [message, setMessage] = useState(\"\");\n//   const [messages, setMessages] = useState({});\n//   const [groupName, setGroupName] = useState(\"\");\n//   const [selectedUsers, setSelectedUsers] = useState([]);\n//   const [groups, setGroups] = useState([]);\n//   const [isCreatingGroup, setIsCreatingGroup] = useState(false);\n\n//   const users = [\"Piyush\", \"Ankita\", \"Charlie\", \"David\", \"Jerry\"]; // Dummy user list\n\n//   // Handle signup submission\n//   const handleSignupSubmit = () => {\n//     if (username.trim() && email.trim() && password.trim()) {\n//       alert(`Signup successful for ${username}!`);\n//       setIsSignup(false);\n//     } else {\n//       alert(\"Please fill all fields for Signup!\");\n//     }\n//   };\n\n//   // Handle login submission\n//   const handleLoginSubmit = () => {\n//     if (loginEmail.trim() && loginPassword.trim()) {\n//       alert(`Login successful for ${loginEmail}!`);\n//       setIsLoggedIn(true);\n//       setIsLogin(false);\n//     } else {\n//       alert(\"Please fill all fields for Login!\");\n//     }\n//   };\n\n//   // Handle sending a message\n//   const handleSendMessage = () => {\n//     if (message.trim() && (activeUser || groups.length > 0)) {\n//       const target = activeUser || groups[activeUser]; // If no active user, chat in group\n//       setMessages((prevMessages) => ({\n//         ...prevMessages,\n//         [target]: [...(prevMessages[target] || []), { sender: \"You\", text: message }],\n//       }));\n//       setMessage(\"\");\n//     }\n//   };\n\n//   // Handle group creation\n//   const handleCreateGroup = () => {\n//     if (groupName.trim() && selectedUsers.length > 0) {\n//       const newGroup = { groupName, users: selectedUsers };\n//       setGroups([...groups, newGroup]);\n//       setIsCreatingGroup(false);\n//       setGroupName(\"\");\n//       setSelectedUsers([]);\n//     } else {\n//       alert(\"Please provide a group name and select users.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isLoggedIn ? (\n//         <>\n//           {!isSignup && !isLogin ? (\n//             <div className=\"welcome-container\">\n//               <h1>Welcome to ChatApp</h1>\n//               <div className=\"button-group\">\n//                 <button onClick={() => setIsSignup(true)}>Signup</button>\n//                 <button onClick={() => setIsLogin(true)}>Login</button>\n//               </div>\n//             </div>\n//           ) : isSignup ? (\n//             <div className=\"form-container\">\n//               <h2>Signup</h2>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Enter your name\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//               />\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"Enter your email\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//               <input\n//                 type=\"password\"\n//                 placeholder=\"Enter your password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//               />\n//               <button onClick={handleSignupSubmit}>Submit</button>\n//             </div>\n//           ) : (\n//             <div className=\"form-container\">\n//               <h2>Login</h2>\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"Enter your email\"\n//                 value={loginEmail}\n//                 onChange={(e) => setLoginEmail(e.target.value)}\n//               />\n//               <input\n//                 type=\"password\"\n//                 placeholder=\"Enter your password\"\n//                 value={loginPassword}\n//                 onChange={(e) => setLoginPassword(e.target.value)}\n//               />\n//               <button onClick={handleLoginSubmit}>Submit</button>\n//             </div>\n//           )}\n//         </>\n//       ) : (\n//         <div className=\"main-container\">\n//           <div className=\"user-list\">\n//             <h3>Users</h3>\n//             {users.map((user) => (\n//               <div\n//                 key={user}\n//                 className={`user ${activeUser === user ? \"active\" : \"\"}`}\n//                 onClick={() => setActiveUser(user)}\n//               >\n//                 {user}\n//               </div>\n//             ))}\n//             <button onClick={() => setIsCreatingGroup(true)}>Create Group</button>\n//           </div>\n//           <div className=\"chat-screen\">\n//             {isCreatingGroup && (\n//               <div className=\"group-creation\">\n//                 <h3>Create a Group</h3>\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Group Name\"\n//                   value={groupName}\n//                   onChange={(e) => setGroupName(e.target.value)}\n//                 />\n//                 <div className=\"user-selection\">\n//                   {users.map((user) => (\n//                     <div key={user}>\n//                       <input\n//                         type=\"checkbox\"\n//                         checked={selectedUsers.includes(user)}\n//                         onChange={() =>\n//                           setSelectedUsers((prev) =>\n//                             prev.includes(user)\n//                               ? prev.filter((u) => u !== user)\n//                               : [...prev, user]\n//                           )\n//                         }\n//                       />\n//                       {user}\n//                     </div>\n//                   ))}\n//                 </div>\n//                 <button onClick={handleCreateGroup}>Create Group</button>\n//               </div>\n//             )}\n\n//             {activeUser || groups.length > 0 ? (\n//               <>\n//                 <h3>{activeUser ? `Chat with ${activeUser}` : \"Chat in Group\"}</h3>\n//                 <div className=\"messages\">\n//                   {(messages[activeUser] || []).map((msg, index) => (\n//                     <div key={index} className={msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\"}>\n//                       <strong>{msg.sender}:</strong> {msg.text}\n//                     </div>\n//                   ))}\n//                 </div>\n//                 <div className=\"chat-input\">\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Type a message\"\n//                     value={message}\n//                     onChange={(e) => setMessage(e.target.value)}\n//                   />\n//                   <div className=\"chat-button\">\n//                     <button onClick={handleSendMessage}>Send</button>\n//                   </div>\n//                 </div>\n//               </>\n//             ) : (\n//               <h3>Select a user or group to start chatting</h3>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./ChatApp.css\";\n\nconst ChatApp = () => {\n  const [isSignup, setIsSignup] = useState(false);\n  const [isLogin, setIsLogin] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [activeUser, setActiveUser] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState({});\n  const [users, setUsers] = useState([]); // State for user list\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [showGroupModal, setShowGroupModal] = useState(false); // Modal state\n  const [selectedUsers, setSelectedUsers] = useState([]); // State for selected users\n  const [groups, setGroups] = useState([]); // State for groups\n\n  // Fetch users from the API\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const response = await fetch(\"https://675914d260576a194d130185.mockapi.io/api/v1/Users\"); // Replace with your API endpoint\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch users\");\n        }\n        const data = await response.json();\n        setUsers(data);\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n\n    fetchUsers();\n  }, []);\n\n  // Handle signup submission\n  const handleSignupSubmit = () => {\n    if (username.trim() && email.trim() && password.trim()) {\n      alert(`Signup successful for ${username}!`);\n      setIsSignup(false);\n    } else {\n      alert(\"Please fill all fields for Signup!\");\n    }\n  };\n\n  // Handle login submission\n  const handleLoginSubmit = () => {\n    if (username.trim() && email.trim()) {\n      alert(`Login successful for ${username}!`);\n      setIsLoggedIn(true);\n      setIsLogin(false);\n    } else {\n      alert(\"Please fill all fields for Login!\");\n    }\n  };\n\n  // Handle sending a message\n  const handleSendMessage = () => {\n    if (message.trim() && activeUser) {\n      setMessages((prevMessages) => ({\n        ...prevMessages,\n        [activeUser]: [\n          ...(prevMessages[activeUser] || []),\n          { sender: \"You\", text: message },\n        ],\n      }));\n      setMessage(\"\");\n    }\n  };\n\n  // Handle user selection for group\n  const toggleUserSelection = (userId) => {\n    setSelectedUsers((prevSelected) =>\n      prevSelected.includes(userId)\n        ? prevSelected.filter((id) => id !== userId)\n        : [...prevSelected, userId]\n    );\n  };\n  \n\n  // Handle group creation\n  const handleCreateGroup = () => {\n    if (selectedUsers.length > 0) {\n      setGroups((prevGroups) => [\n        ...prevGroups,\n        { id: groups.length + 1, members: selectedUsers },\n      ]);\n      alert(\"Group created successfully!\");\n      setSelectedUsers([]);\n      setShowGroupModal(false);\n    } else {\n      alert(\"Please select at least one user to create a group!\");\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      {!isLoggedIn ? (\n        <>\n          {!isSignup && !isLogin ? (\n            <div className=\"welcome-container\">\n              <h1>Welcome to ChatApp</h1>\n              <div className=\"button-group\">\n                <button onClick={() => setIsSignup(true)}>Signup</button>\n                <button onClick={() => setIsLogin(true)}>Login</button>\n              </div>\n            </div>\n          ) : isSignup ? (\n            <div className=\"form-container\">\n              <h2>Signup</h2>\n              <input\n                type=\"text\"\n                placeholder=\"Enter your name\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n              />\n              <input\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n              <button onClick={handleSignupSubmit}>Submit</button>\n            </div>\n          ) : (\n            <div className=\"form-container\">\n              <h2>Login</h2>\n              <input\n                type=\"text\"\n                placeholder=\"Enter your name\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n              />\n              <input\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              <button onClick={handleLoginSubmit}>Submit</button>\n            </div>\n          )}\n        </>\n      ) : (\n        <div className=\"main-container\">\n          <div className=\"user-list\">\n  <h3>Users</h3>\n  {loading ? (\n    <p>Loading...</p>\n  ) : error ? (\n    <p style={{ color: \"red\" }}>{error}</p>\n  ) : (\n    users.map((user) => (\n      <div\n        key={user.id} // Use a unique key like `id`\n        className={`user ${activeUser === user.id ? \"active\" : \"\"}`} // Compare using a unique identifier\n        onClick={() => setActiveUser(user.id)} // Use user.id to set activeUser\n      >\n        {user.name} {/ Display user properties /}\n      </div>\n    ))\n  )}\n  <button onClick={() => setShowGroupModal(true)}>Create Group</button>\n</div>\n\n          <div className=\"chat-screen\">\n            {activeUser ? (\n              <>\n                <h3>Chat with {activeUser}</h3>\n                <div className=\"messages\">\n                  {(messages[activeUser] || []).map((msg, index) => (\n                    <div\n                      key={index}\n                      className={\n                        msg.sender === \"You\"\n                          ? \"message-sender\"\n                          : \"message-receiver\"\n                      }\n                    >\n                      <strong>{msg.sender}:</strong> {msg.text}\n                    </div>\n                  ))}\n                </div>\n                <div className=\"chat-input\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Type a message\"\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                  />\n                  <button onClick={handleSendMessage}>Send</button>\n                </div>\n              </>\n            ) : (\n              <h3>Select a user to start chatting</h3>\n            )}\n          </div>\n\n          {showGroupModal && (\n            <div className=\"modal\">\n              <h3>Create a Group</h3>\n              {users.map((user) => (\n  <div key={user.id}>\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={selectedUsers.includes(user.id)}\n        onChange={() => toggleUserSelection(user.id)} // Pass user.id instead of the object\n      />\n      {user.name}\n    </label>\n  </div>\n))}\n\n              <button onClick={handleCreateGroup}>Create Group</button>\n              <button onClick={() => setShowGroupModal(false)}>Cancel</button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatApp;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvB,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}