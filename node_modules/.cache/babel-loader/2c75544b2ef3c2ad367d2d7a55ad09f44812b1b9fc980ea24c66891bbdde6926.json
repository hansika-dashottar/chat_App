{"ast":null,"code":"// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input ka state\n//   const [messages, setMessages] = useState([]); // Messages list ka state\n\n//   // Message send karne ka function\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, message]); // Message ko list me add karo\n//       setMessage(\"\"); // Input field ko clear karo\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat with John Doe</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to the backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Input message state\n//   const [messages, setMessages] = useState([]); // Messages list state\n\n//   // Load initial messages from the backend\n//   useEffect(() => {\n//     fetch(\"http://localhost:4000/api\")\n//       .then((response) => response.json())\n//       .then((data) => setMessages(data.messages || []))\n//       .catch((err) => console.error(\"Error fetching messages:\", err));\n//   }, []);\n\n//   // Listen for incoming messages via Socket.IO\n//   useEffect(() => {\n//     socket.on(\"messageResponse\", (data) => {\n//       console.log(data)\n//       setMessages((prevMessages) => [...prevMessages, JSON.parse(data)]);\n//     });\n\n//     return () => {\n//       socket.off(\"messageResponse\");\n//     };\n//   }, []);\n\n//   // Function to send a new message\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       const messageData = JSON.stringify({ text: message, timestamp: Date.now()});\n//       socket.emit(\"message\", messageData); // Send message to the backend\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat Application</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg.text} <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString()}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"Other\", text: newMessage }]);\n//     });\n\n//     // Clean up the listener when component unmounts\n//     return () => socket.off(\"receiveMessage\");\n//   }, []);\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"You\", text: message }]);\n//       socket.emit(\"sendMessage\", message); // Emit message to the server\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">\n//         <h2>Basic Chat App</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className={msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\"}>\n//             <strong>{msg.sender}:</strong> {msg.text}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\nconst express = require(\"express\");\nconst http = require(\"http\");\nconst socketIO = require(\"socket.io\");\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIO(server, {\n  cors: {\n    origin: \"http://localhost:3000\",\n    methods: [\"GET\", \"POST\"]\n  }\n});\n\n// Handle Socket.IO connections\nio.on(\"connection\", socket => {\n  console.log(`âš¡: User connected with ID: ${socket.id}`);\n\n  // Join a room\n  socket.on(\"joinRoom\", roomID => {\n    socket.join(roomID);\n    console.log(`User with ID ${socket.id} joined room: ${roomID}`);\n    socket.to(roomID).emit(\"message\", `User ${socket.id} joined the room.`);\n  });\n\n  // Receive and broadcast messages within a specific room\n  socket.on(\"sendMessage\", ({\n    roomID,\n    message\n  }) => {\n    console.log(`Message in room ${roomID}:`, message);\n    socket.to(roomID).emit(\"receiveMessage\", message); // Broadcast to others in the room\n  });\n\n  // Handle disconnection\n  socket.on(\"disconnect\", () => {\n    console.log(`ğŸ”¥: User disconnected with ID: ${socket.id}`);\n  });\n});\n\n// Start the server\nconst PORT = 4000;\nserver.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","http","socketIO","app","server","createServer","io","cors","origin","methods","on","socket","console","log","id","roomID","join","to","emit","message","PORT","listen"],"sources":["/Users/hipl/Documents/Tasks/chatApp/chatFrontend/my-app/src/ChatApp.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input ka state\n//   const [messages, setMessages] = useState([]); // Messages list ka state\n\n//   // Message send karne ka function\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, message]); // Message ko list me add karo\n//       setMessage(\"\"); // Input field ko clear karo\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat with John Doe</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to the backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Input message state\n//   const [messages, setMessages] = useState([]); // Messages list state\n\n//   // Load initial messages from the backend\n//   useEffect(() => {\n//     fetch(\"http://localhost:4000/api\")\n//       .then((response) => response.json())\n//       .then((data) => setMessages(data.messages || []))\n//       .catch((err) => console.error(\"Error fetching messages:\", err));\n//   }, []);\n\n//   // Listen for incoming messages via Socket.IO\n//   useEffect(() => {\n//     socket.on(\"messageResponse\", (data) => {\n//       console.log(data)\n//       setMessages((prevMessages) => [...prevMessages, JSON.parse(data)]);\n//     });\n\n//     return () => {\n//       socket.off(\"messageResponse\");\n//     };\n//   }, []);\n\n//   // Function to send a new message\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       const messageData = JSON.stringify({ text: message, timestamp: Date.now()});\n//       socket.emit(\"message\", messageData); // Send message to the backend\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat Application</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg.text} <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString()}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"Other\", text: newMessage }]);\n//     });\n\n//     // Clean up the listener when component unmounts\n//     return () => socket.off(\"receiveMessage\");\n//   }, []);\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"You\", text: message }]);\n//       socket.emit(\"sendMessage\", message); // Emit message to the server\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">\n//         <h2>Basic Chat App</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className={msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\"}>\n//             <strong>{msg.sender}:</strong> {msg.text}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\nconst express = require(\"express\");\nconst http = require(\"http\");\nconst socketIO = require(\"socket.io\");\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIO(server, {\n    cors: {\n        origin: \"http://localhost:3000\",\n        methods: [\"GET\", \"POST\"],\n    },\n});\n\n// Handle Socket.IO connections\nio.on(\"connection\", (socket) => {\n    console.log(`âš¡: User connected with ID: ${socket.id}`);\n\n    // Join a room\n    socket.on(\"joinRoom\", (roomID) => {\n        socket.join(roomID);\n        console.log(`User with ID ${socket.id} joined room: ${roomID}`);\n        socket.to(roomID).emit(\"message\", `User ${socket.id} joined the room.`);\n    });\n\n    // Receive and broadcast messages within a specific room\n    socket.on(\"sendMessage\", ({ roomID, message }) => {\n        console.log(`Message in room ${roomID}:`, message);\n        socket.to(roomID).emit(\"receiveMessage\", message); // Broadcast to others in the room\n    });\n\n    // Handle disconnection\n    socket.on(\"disconnect\", () => {\n        console.log(`ğŸ”¥: User disconnected with ID: ${socket.id}`);\n    });\n});\n\n// Start the server\nconst PORT = 4000;\nserver.listen(PORT, () => {\n    console.log(`Server is running on http://localhost:${PORT}`);\n});\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,QAAQ,GAAGF,OAAO,CAAC,WAAW,CAAC;AAErC,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,MAAM,GAAGH,IAAI,CAACI,YAAY,CAACF,GAAG,CAAC;AACrC,MAAMG,EAAE,GAAGJ,QAAQ,CAACE,MAAM,EAAE;EACxBG,IAAI,EAAE;IACFC,MAAM,EAAE,uBAAuB;IAC/BC,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM;EAC3B;AACJ,CAAC,CAAC;;AAEF;AACAH,EAAE,CAACI,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAK;EAC5BC,OAAO,CAACC,GAAG,CAAC,8BAA8BF,MAAM,CAACG,EAAE,EAAE,CAAC;;EAEtD;EACAH,MAAM,CAACD,EAAE,CAAC,UAAU,EAAGK,MAAM,IAAK;IAC9BJ,MAAM,CAACK,IAAI,CAACD,MAAM,CAAC;IACnBH,OAAO,CAACC,GAAG,CAAC,gBAAgBF,MAAM,CAACG,EAAE,iBAAiBC,MAAM,EAAE,CAAC;IAC/DJ,MAAM,CAACM,EAAE,CAACF,MAAM,CAAC,CAACG,IAAI,CAAC,SAAS,EAAE,QAAQP,MAAM,CAACG,EAAE,mBAAmB,CAAC;EAC3E,CAAC,CAAC;;EAEF;EACAH,MAAM,CAACD,EAAE,CAAC,aAAa,EAAE,CAAC;IAAEK,MAAM;IAAEI;EAAQ,CAAC,KAAK;IAC9CP,OAAO,CAACC,GAAG,CAAC,mBAAmBE,MAAM,GAAG,EAAEI,OAAO,CAAC;IAClDR,MAAM,CAACM,EAAE,CAACF,MAAM,CAAC,CAACG,IAAI,CAAC,gBAAgB,EAAEC,OAAO,CAAC,CAAC,CAAC;EACvD,CAAC,CAAC;;EAEF;EACAR,MAAM,CAACD,EAAE,CAAC,YAAY,EAAE,MAAM;IAC1BE,OAAO,CAACC,GAAG,CAAC,kCAAkCF,MAAM,CAACG,EAAE,EAAE,CAAC;EAC9D,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACA,MAAMM,IAAI,GAAG,IAAI;AACjBhB,MAAM,CAACiB,MAAM,CAACD,IAAI,EAAE,MAAM;EACtBR,OAAO,CAACC,GAAG,CAAC,yCAAyCO,IAAI,EAAE,CAAC;AAChE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}