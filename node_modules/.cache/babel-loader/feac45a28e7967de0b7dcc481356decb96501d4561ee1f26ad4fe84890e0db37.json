{"ast":null,"code":"var _jsxFileName = \"/Users/hipl/Documents/Tasks/chatApp/chatFrontend/my-app/src/ChatApp.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input ka state\n//   const [messages, setMessages] = useState([]); // Messages list ka state\n\n//   // Message send karne ka function\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, message]); // Message ko list me add karo\n//       setMessage(\"\"); // Input field ko clear karo\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat with John Doe</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to the backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Input message state\n//   const [messages, setMessages] = useState([]); // Messages list state\n\n//   // Load initial messages from the backend\n//   useEffect(() => {\n//     fetch(\"http://localhost:4000/api\")\n//       .then((response) => response.json())\n//       .then((data) => setMessages(data.messages || []))\n//       .catch((err) => console.error(\"Error fetching messages:\", err));\n//   }, []);\n\n//   // Listen for incoming messages via Socket.IO\n//   useEffect(() => {\n//     socket.on(\"messageResponse\", (data) => {\n//       console.log(data)\n//       setMessages((prevMessages) => [...prevMessages, JSON.parse(data)]);\n//     });\n\n//     return () => {\n//       socket.off(\"messageResponse\");\n//     };\n//   }, []);\n\n//   // Function to send a new message\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       const messageData = JSON.stringify({ text: message, timestamp: Date.now()});\n//       socket.emit(\"message\", messageData); // Send message to the backend\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat Application</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg.text} <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString()}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"Other\", text: newMessage }]);\n//     });\n\n//     // Clean up the listener when component unmounts\n//     return () => socket.off(\"receiveMessage\");\n//   }, []);\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"You\", text: message }]);\n//       socket.emit(\"sendMessage\", message); // Emit message to the server\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">\n//         <h2>Basic Chat App</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className={msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\"}>\n//             <strong>{msg.sender}:</strong> {msg.text}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\");\n\n// const ChatApp = () => {\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID input\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"Other\", text: newMessage },\n//       ]);\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//     };\n//   }, []);\n\n//   // Join a room\n//   const joinRoom = () => {\n//     if (roomID.trim()) {\n//       socket.emit(\"joinRoom\", roomID);\n//       setIsInRoom(true); // Mark user as in a room\n//     }\n//   };\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n//       socket.emit(\"sendMessage\", { roomID, message }); // Emit message with room ID\n//       setMessage(\"\"); // Clear input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Room ID</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, newMessage]);\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} created room with ID: ${roomID}`);\n//     });\n\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} joined room: ${roomID}`);\n//     });\n\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, []);\n\n//   // Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       socket.emit(\"createRoom\", username); // Request the server to create a room\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       socket.emit(\"joinRoom\", { roomID, username }); // Request to join the room\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       socket.emit(\"sendMessage\", { roomID, username, message }); // Send message to the server\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n//       setMessage(\"\"); // Clear input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n//Important\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       // Prevent adding the sender's message again\n//       if (newMessage.sender !== username) {\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       }\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} created room with ID: ${roomID}`);\n//     });\n\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} joined room: ${roomID}`);\n//     });\n\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, [username]);\n\n//   // Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       socket.emit(\"createRoom\", username); // Request the server to create a room\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       socket.emit(\"joinRoom\", { roomID, username }); // Request to join the room\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       // Add the message to the sender's local chat history\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n\n//       // Emit the message to the server\n//       socket.emit(\"sendMessage\", { roomID, username, message });\n\n//       // Clear the input field\n//       setMessage(\"\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n//---------------Important-----------------//\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// // Initialize Socket.IO client\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming events from the backend\n//   useEffect(() => {\n//     // Event: New message received\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       if (newMessage.sender !== username) {\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       }\n//     });\n\n//     // Event: System messages\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     // Event: Room created\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       console.log(\"Room created successfully:\", { roomID, username });\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Room joined\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       console.log(`${username} joined room: ${roomID}`);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Error messages\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     // Cleanup listeners on component unmount\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, [username]);\n\n//   // Function: Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       console.log(\"Requesting room creation for:\", username);\n//       socket.emit(\"createRoom\", username);\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Function: Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       console.log(`Requesting to join room ${roomID} as ${username}`);\n//       socket.emit(\"joinRoom\", { roomID, username });\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Function: Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       // Add the message to the sender's local chat history\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n\n//       // Emit the message to the server\n//       socket.emit(\"sendMessage\", { roomID, username, message });\n\n//       // Clear the input field\n//       setMessage(\"\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// // Initialize Socket.IO client\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [email, setEmail] = useState(\"\"); // User's email\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n//   const [isRegistered, setIsRegistered] = useState(false); // Registration status\n//   const [isJoiningRoom, setIsJoiningRoom] = useState(false); // Track if user is joining a room\n\n//   // Listen for incoming events from the backend\n//   useEffect(() => {\n//     // Event: New message received\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       if (newMessage.sender !== username) {\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       }\n//     });\n\n//     // Event: System messages\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     // Event: Room created\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       console.log(\"Room created successfully:\", { roomID, username });\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Room joined\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       console.log(`${username} joined room: ${roomID}`);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Error messages\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     // Cleanup listeners on component unmount\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, [username]);\n\n//   // Function: Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       console.log(\"Requesting room creation for:\", username);\n//       socket.emit(\"createRoom\", username);\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Function: Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       console.log(`Requesting to join room ${roomID} as ${username}`);\n//       socket.emit(\"joinRoom\", { roomID, username });\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Function: Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       // Add the message to the sender's local chat history\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n\n//       // Emit the message to the server\n//       socket.emit(\"sendMessage\", { roomID, username, message });\n\n//       // Clear the input field\n//       setMessage(\"\");\n//     }\n//   };\n\n//   // Handle user registration (Name + Email)\n//   const handleRegistration = () => {\n//     if (username.trim() && email.trim()) {\n//       setIsRegistered(true);\n//     } else {\n//       alert(\"Please enter both name and email!\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isRegistered ? (\n//         // Registration Step\n//         <div className=\"registration-container\">\n//           <h2>Enter Your Details</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <input\n//             type=\"email\"\n//             placeholder=\"Your email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//           />\n//           <button onClick={handleRegistration}>Submit</button>\n//         </div>\n//       ) : !isInRoom ? (\n//         // Room creation / joining Step\n//         <div className=\"room-container\">\n//           <h2>Enter Your Room</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter room name\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//             disabled={isJoiningRoom} // Disable room ID input if joining room\n//           />\n//           <div className=\"room-buttons\">\n//             <button\n//               onClick={createRoom}\n//               disabled={isJoiningRoom}\n//               className=\"room-button\"\n//             >\n//               Create Room\n//             </button>\n//             <button\n//               onClick={() => setIsJoiningRoom(true)}\n//               disabled={createdRoomID}\n//               className=\"room-button\"\n//             >\n//               Join Room\n//             </button>\n//           </div>\n\n//           {/* If user is joining, show the join button */}\n//           {isJoiningRoom && (\n//             <div>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Room ID\"\n//                 value={roomID}\n//                 onChange={(e) => setRoomID(e.target.value)}\n//               />\n//               <button onClick={joinRoom}>Join Room</button>\n//             </div>\n//           )}\n//         </div>\n//       ) : (\n//         // Chat Room Step\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [isSignup, setIsSignup] = useState(false); // Track if user clicked signup\n//   const [isLogin, setIsLogin] = useState(false); // Track if user clicked login\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [email, setEmail] = useState(\"\"); // User's email\n//   const [password, setPassword] = useState(\"\"); // User's password\n\n//   // Handle signup submission\n//   const handleSignupSubmit = () => {\n//     if (username.trim() && email.trim() && password.trim()) {\n//       alert(`Signup successful for ${username}!`);\n//       // Reset fields\n//       setUsername(\"\");\n//       setEmail(\"\");\n//       setPassword(\"\");\n//       setIsSignup(false);\n//     } else {\n//       alert(\"Please fill all fields for Signup!\");\n//     }\n//   };\n\n//   // Handle login submission\n//   const handleLoginSubmit = () => {\n//     if (username.trim() && email.trim()) {\n//       alert(`Login successful for ${username}!`);\n//       // Reset fields\n//       setUsername(\"\");\n//       setEmail(\"\");\n//       setIsLogin(false);\n//     } else {\n//       alert(\"Please fill all fields for Login!\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isSignup && !isLogin ? (\n//         // Initial Welcome Screen\n//         <div className=\"welcome-container\">\n//           <h1>Welcome to ChatApp</h1>\n//           <div className=\"button-group\">\n//             <button onClick={() => setIsSignup(true)}>Signup</button>\n//             <button onClick={() => setIsLogin(true)}>Login</button>\n//           </div>\n//         </div>\n//       ) : isSignup ? (\n//         // Signup Screen\n//         <div className=\"form-container\">\n//           <h2>Signup</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <input\n//             type=\"email\"\n//             placeholder=\"Enter your email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//           />\n//           <input\n//             type=\"password\"\n//             placeholder=\"Enter your password\"\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//           />\n//           <button onClick={handleSignupSubmit}>Submit</button>\n//         </div>\n//       ) : (\n//         // Login Screen\n//         <div className=\"form-container\">\n//           <h2>Login</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <input\n//             type=\"email\"\n//             placeholder=\"Enter your email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//           />\n//           <button onClick={handleLoginSubmit}>Submit</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [isSignup, setIsSignup] = useState(false);\n//   const [isLogin, setIsLogin] = useState(false);\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [username, setUsername] = useState(\"\");\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [activeUser, setActiveUser] = useState(null);\n//   const [message, setMessage] = useState(\"\");\n//   const [messages, setMessages] = useState({});\n//   const users = [\"Piyush\", \"Ankita\", \"Charlie\", \"David\", \"Jerry\"]; // Dummy user list\n\n//   // Handle signup submission\n//   const handleSignupSubmit = () => {\n//     if (username.trim() && email.trim() && password.trim()) {\n//       alert(`Signup successful for ${username}!`);\n//       setIsSignup(false);\n//     } else {\n//       alert(\"Please fill all fields for Signup!\");\n//     }\n//   };\n\n//   // Handle login submission\n//   const handleLoginSubmit = () => {\n//     if (username.trim() && email.trim()) {\n//       alert(`Login successful for ${username}!`);\n//       setIsLoggedIn(true);\n//       setIsLogin(false);\n//     } else {\n//       alert(\"Please fill all fields for Login!\");\n//     }\n//   };\n\n//   // Handle sending a message\n//   const handleSendMessage = () => {\n//     if (message.trim() && activeUser) {\n//       setMessages((prevMessages) => ({\n//         ...prevMessages,\n//         [activeUser]: [...(prevMessages[activeUser] || []), { sender: \"You\", text: message }],\n//       }));\n//       setMessage(\"\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isLoggedIn ? (\n//         <>\n//           {!isSignup && !isLogin ? (\n//             <div className=\"welcome-container\">\n//               <h1>Welcome to ChatApp</h1>\n//               <div className=\"button-group\">\n//                 <button onClick={() => setIsSignup(true)}>Signup</button>\n//                 <button onClick={() => setIsLogin(true)}>Login</button>\n//               </div>\n//             </div>\n//           ) : isSignup ? (\n//             <div className=\"form-container\">\n//               <h2>Signup</h2>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Enter your name\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//               />\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"Enter your email\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//               <input\n//                 type=\"password\"\n//                 placeholder=\"Enter your password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//               />\n//               <button onClick={handleSignupSubmit}>Submit</button>\n//             </div>\n//           ) : (\n//             <div className=\"form-container\">\n//               <h2>Login</h2>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Enter your name\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//               />\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"Enter your email\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//               <button onClick={handleLoginSubmit}>Submit</button>\n//             </div>\n//           )}\n//         </>\n//       ) : (\n//         <div className=\"main-container\">\n//           <div className=\"user-list\">\n//             <h3>Users</h3>\n//             {users.map((user) => (\n//               <div\n//                 key={user}\n//                 className={`user ${activeUser === user ? \"active\" : \"\"}`}\n//                 onClick={() => setActiveUser(user)}\n//               >\n//                 {user}\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"chat-screen\">\n//             {activeUser ? (\n//               <>\n//                 <h3>Chat with {activeUser}</h3>\n//                 <div className=\"messages\">\n//                   {(messages[activeUser] || []).map((msg, index) => (\n//                     <div key={index} className={msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\"}>\n//                       <strong>{msg.sender}:</strong> {msg.text}\n//                     </div>\n//                   ))}\n//                 </div>\n//                 <div className=\"chat-input\">\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Type a message\"\n//                     value={message}\n//                     onChange={(e) => setMessage(e.target.value)}\n//                   />\n//                   <div className=\"chat-button\">\n//                       <button onClick={handleSendMessage}>Send</button>\n//                   </div>\n//                 </div>\n//               </>\n//             ) : (\n//               <h3>Select a user to start chatting</h3>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [isSignup, setIsSignup] = useState(false);\n//   const [isLogin, setIsLogin] = useState(false);\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [username, setUsername] = useState(\"\");\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [activeUser, setActiveUser] = useState(null);\n//   const [message, setMessage] = useState(\"\");\n//   const [messages, setMessages] = useState({});\n//   const [groupName, setGroupName] = useState(\"\");\n//   const [selectedUsers, setSelectedUsers] = useState([]);\n//   const [groups, setGroups] = useState([]);\n//   const [isCreatingGroup, setIsCreatingGroup] = useState(false);\n\n//   const users = [\"Piyush\", \"Ankita\", \"Charlie\", \"David\", \"Jerry\"]; // Dummy user list\n\n//   // Handle signup submission\n//   const handleSignupSubmit = () => {\n//     if (username.trim() && email.trim() && password.trim()) {\n//       alert(`Signup successful for ${username}!`);\n//       setIsSignup(false);\n//     } else {\n//       alert(\"Please fill all fields for Signup!\");\n//     }\n//   };\n\n//   // Handle login submission\n//   const handleLoginSubmit = () => {\n//     if (username.trim() && email.trim()) {\n//       alert(`Login successful for ${username}!`);\n//       setIsLoggedIn(true);\n//       setIsLogin(false);\n//     } else {\n//       alert(\"Please fill all fields for Login!\");\n//     }\n//   };\n\n//   // Handle sending a message\n//   const handleSendMessage = () => {\n//     if (message.trim() && (activeUser || groups.length > 0)) {\n//       const target = activeUser || groups[activeUser]; // If no active user, chat in group\n//       setMessages((prevMessages) => ({\n//         ...prevMessages,\n//         [target]: [...(prevMessages[target] || []), { sender: \"You\", text: message }],\n//       }));\n//       setMessage(\"\");\n//     }\n//   };\n\n//   // Handle group creation\n//   const handleCreateGroup = () => {\n//     if (groupName.trim() && selectedUsers.length > 0) {\n//       const newGroup = { groupName, users: selectedUsers };\n//       setGroups([...groups, newGroup]);\n//       setIsCreatingGroup(false);\n//       setGroupName(\"\");\n//       setSelectedUsers([]);\n//     } else {\n//       alert(\"Please provide a group name and select users.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isLoggedIn ? (\n//         <>\n//           {!isSignup && !isLogin ? (\n//             <div className=\"welcome-container\">\n//               <h1>Welcome to ChatApp</h1>\n//               <div className=\"button-group\">\n//                 <button onClick={() => setIsSignup(true)}>Signup</button>\n//                 <button onClick={() => setIsLogin(true)}>Login</button>\n//               </div>\n//             </div>\n//           ) : isSignup ? (\n//             <div className=\"form-container\">\n//               <h2>Signup</h2>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Enter your name\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//               />\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"Enter your email\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//               <input\n//                 type=\"password\"\n//                 placeholder=\"Enter your password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//               />\n//               <button onClick={handleSignupSubmit}>Submit</button>\n//             </div>\n//           ) : (\n//             <div className=\"form-container\">\n//               <h2>Login</h2>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Enter your name\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//               />\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"Enter your email\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//               <button onClick={handleLoginSubmit}>Submit</button>\n//             </div>\n//           )}\n//         </>\n//       ) : (\n//         <div className=\"main-container\">\n//           <div className=\"user-list\">\n//             <h3>Users</h3>\n//             {users.map((user) => (\n//               <div\n//                 key={user}\n//                 className={`user ${activeUser === user ? \"active\" : \"\"}`}\n//                 onClick={() => setActiveUser(user)}\n//               >\n//                 {user}\n//               </div>\n//             ))}\n//             <button onClick={() => setIsCreatingGroup(true)}>Create Group</button>\n//           </div>\n//           <div className=\"chat-screen\">\n//             {isCreatingGroup && (\n//               <div className=\"group-creation\">\n//                 <h3>Create a Group</h3>\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Group Name\"\n//                   value={groupName}\n//                   onChange={(e) => setGroupName(e.target.value)}\n//                 />\n//                 <div className=\"user-selection\">\n//                   {users.map((user) => (\n//                     <div key={user}>\n//                       <input\n//                         type=\"checkbox\"\n//                         checked={selectedUsers.includes(user)}\n//                         onChange={() =>\n//                           setSelectedUsers((prev) =>\n//                             prev.includes(user)\n//                               ? prev.filter((u) => u !== user)\n//                               : [...prev, user]\n//                           )\n//                         }\n//                       />\n//                       {user}\n//                     </div>\n//                   ))}\n//                 </div>\n//                 <button onClick={handleCreateGroup}>Create Group</button>\n//               </div>\n//             )}\n\n//             {activeUser || groups.length > 0 ? (\n//               <>\n//                 <h3>{activeUser ? `Chat with ${activeUser}` : \"Chat in Group\"}</h3>\n//                 <div className=\"messages\">\n//                   {(messages[activeUser] || []).map((msg, index) => (\n//                     <div key={index} className={msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\"}>\n//                       <strong>{msg.sender}:</strong> {msg.text}\n//                     </div>\n//                   ))}\n//                 </div>\n//                 <div className=\"chat-input\">\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Type a message\"\n//                     value={message}\n//                     onChange={(e) => setMessage(e.target.value)}\n//                   />\n//                   <div className=\"chat-button\">\n//                     <button onClick={handleSendMessage}>Send</button>\n//                   </div>\n//                 </div>\n//               </>\n//             ) : (\n//               <h3>Select a user or group to start chatting</h3>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\nimport React, { useState } from \"react\";\nimport \"./ChatApp.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  const [isSignup, setIsSignup] = useState(false);\n  const [isLogin, setIsLogin] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [activeUser, setActiveUser] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState({});\n  const [groupName, setGroupName] = useState(\"\");\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [isCreatingGroup, setIsCreatingGroup] = useState(false);\n  const users = [\"Piyush\", \"Ankita\", \"Charlie\", \"David\", \"Jerry\"]; // Dummy user list\n\n  // Handle signup submission\n  const handleSignupSubmit = () => {\n    if (username.trim() && email.trim() && password.trim()) {\n      alert(`Signup successful for ${username}!`);\n      setIsSignup(false);\n    } else {\n      alert(\"Please fill all fields for Signup!\");\n    }\n  };\n\n  // Handle login submission\n  const handleLoginSubmit = () => {\n    if (username.trim() && email.trim()) {\n      alert(`Login successful for ${username}!`);\n      setIsLoggedIn(true);\n      setIsLogin(false);\n    } else {\n      alert(\"Please fill all fields for Login!\");\n    }\n  };\n\n  // Handle sending a message\n  const handleSendMessage = () => {\n    if (message.trim() && activeUser) {\n      setMessages(prevMessages => ({\n        ...prevMessages,\n        [activeUser]: [...(prevMessages[activeUser] || []), {\n          sender: \"You\",\n          text: message\n        }]\n      }));\n      setMessage(\"\");\n    }\n  };\n\n  // Handle group creation\n  const handleCreateGroup = () => {\n    if (groupName.trim() && selectedUsers.length > 0) {\n      const newGroup = {\n        groupName,\n        users: selectedUsers\n      };\n      setGroups([...groups, newGroup]);\n      setIsCreatingGroup(false);\n      setGroupName(\"\");\n      setSelectedUsers([]);\n    } else {\n      alert(\"Please provide a group name and select users.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: !isLoggedIn ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: !isSignup && !isLogin ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"welcome-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Welcome to ChatApp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1507,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setIsSignup(true),\n            children: \"Signup\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1509,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setIsLogin(true),\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1510,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1508,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1506,\n        columnNumber: 13\n      }, this) : isSignup ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Signup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1515,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter your name\",\n          value: username,\n          onChange: e => setUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1516,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Enter your email\",\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1522,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Enter your password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1528,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSignupSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1534,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1514,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1538,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter your name\",\n          value: username,\n          onChange: e => setUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1539,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Enter your email\",\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1545,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLoginSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1551,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1537,\n        columnNumber: 13\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"create-group-button\",\n          onClick: () => setIsCreatingGroup(true),\n          children: \"Create Group\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1558,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1561,\n          columnNumber: 13\n        }, this), users.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `user ${activeUser === user ? \"active\" : \"\"}`,\n          onClick: () => setActiveUser(user),\n          children: user\n        }, user, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1563,\n          columnNumber: 15\n        }, this)), groups.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `user ${activeUser === group.groupName ? \"active\" : \"\"}`,\n          onClick: () => setActiveUser(group.groupName),\n          children: [group.groupName, \" (Group)\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1572,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1557,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-screen\",\n        children: [isCreatingGroup && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"group-creation\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Create a Group\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1584,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Group Name\",\n            value: groupName,\n            onChange: e => setGroupName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1585,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-selection\",\n            children: users.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: selectedUsers.includes(user),\n                onChange: () => setSelectedUsers(prev => prev.includes(user) ? prev.filter(u => u !== user) : [...prev, user])\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1594,\n                columnNumber: 23\n              }, this), user]\n            }, user, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1593,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1591,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCreateGroup,\n            children: \"Create Group\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1609,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1583,\n          columnNumber: 15\n        }, this), activeUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Chat with \", activeUser]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1614,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages\",\n            children: (messages[activeUser] || []).map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [msg.sender, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1618,\n                columnNumber: 23\n              }, this), \" \", msg.text]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1617,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1615,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Type a message\",\n              value: message,\n              onChange: e => setMessage(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1623,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleSendMessage,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1629,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1622,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select a user or group to start chatting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1633,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1581,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1556,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1502,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"WdzJlX0Qf+cdyjgExabu1snPQ1c=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatApp","_s","isSignup","setIsSignup","isLogin","setIsLogin","isLoggedIn","setIsLoggedIn","username","setUsername","email","setEmail","password","setPassword","activeUser","setActiveUser","message","setMessage","messages","setMessages","groupName","setGroupName","selectedUsers","setSelectedUsers","groups","setGroups","isCreatingGroup","setIsCreatingGroup","users","handleSignupSubmit","trim","alert","handleLoginSubmit","handleSendMessage","prevMessages","sender","text","handleCreateGroup","length","newGroup","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","map","user","group","index","checked","includes","prev","filter","u","msg","_c","$RefreshReg$"],"sources":["/Users/hipl/Documents/Tasks/chatApp/chatFrontend/my-app/src/ChatApp.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input ka state\n//   const [messages, setMessages] = useState([]); // Messages list ka state\n\n//   // Message send karne ka function\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, message]); // Message ko list me add karo\n//       setMessage(\"\"); // Input field ko clear karo\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat with John Doe</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to the backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Input message state\n//   const [messages, setMessages] = useState([]); // Messages list state\n\n//   // Load initial messages from the backend\n//   useEffect(() => {\n//     fetch(\"http://localhost:4000/api\")\n//       .then((response) => response.json())\n//       .then((data) => setMessages(data.messages || []))\n//       .catch((err) => console.error(\"Error fetching messages:\", err));\n//   }, []);\n\n//   // Listen for incoming messages via Socket.IO\n//   useEffect(() => {\n//     socket.on(\"messageResponse\", (data) => {\n//       console.log(data)\n//       setMessages((prevMessages) => [...prevMessages, JSON.parse(data)]);\n//     });\n\n//     return () => {\n//       socket.off(\"messageResponse\");\n//     };\n//   }, []);\n\n//   // Function to send a new message\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       const messageData = JSON.stringify({ text: message, timestamp: Date.now()});\n//       socket.emit(\"message\", messageData); // Send message to the backend\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat Application</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg.text} <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString()}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"Other\", text: newMessage }]);\n//     });\n\n//     // Clean up the listener when component unmounts\n//     return () => socket.off(\"receiveMessage\");\n//   }, []);\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"You\", text: message }]);\n//       socket.emit(\"sendMessage\", message); // Emit message to the server\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">\n//         <h2>Basic Chat App</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className={msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\"}>\n//             <strong>{msg.sender}:</strong> {msg.text}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\");\n\n// const ChatApp = () => {\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID input\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"Other\", text: newMessage },\n//       ]);\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//     };\n//   }, []);\n\n//   // Join a room\n//   const joinRoom = () => {\n//     if (roomID.trim()) {\n//       socket.emit(\"joinRoom\", roomID);\n//       setIsInRoom(true); // Mark user as in a room\n//     }\n//   };\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n//       socket.emit(\"sendMessage\", { roomID, message }); // Emit message with room ID\n//       setMessage(\"\"); // Clear input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Room ID</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, newMessage]);\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} created room with ID: ${roomID}`);\n//     });\n\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} joined room: ${roomID}`);\n//     });\n\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, []);\n\n//   // Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       socket.emit(\"createRoom\", username); // Request the server to create a room\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       socket.emit(\"joinRoom\", { roomID, username }); // Request to join the room\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       socket.emit(\"sendMessage\", { roomID, username, message }); // Send message to the server\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n//       setMessage(\"\"); // Clear input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n//Important\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       // Prevent adding the sender's message again\n//       if (newMessage.sender !== username) {\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       }\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} created room with ID: ${roomID}`);\n//     });\n\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} joined room: ${roomID}`);\n//     });\n\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, [username]);\n\n//   // Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       socket.emit(\"createRoom\", username); // Request the server to create a room\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       socket.emit(\"joinRoom\", { roomID, username }); // Request to join the room\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       // Add the message to the sender's local chat history\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n\n//       // Emit the message to the server\n//       socket.emit(\"sendMessage\", { roomID, username, message });\n\n//       // Clear the input field\n//       setMessage(\"\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n\n//---------------Important-----------------//\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// // Initialize Socket.IO client\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming events from the backend\n//   useEffect(() => {\n//     // Event: New message received\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       if (newMessage.sender !== username) {\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       }\n//     });\n\n//     // Event: System messages\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     // Event: Room created\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       console.log(\"Room created successfully:\", { roomID, username });\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Room joined\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       console.log(`${username} joined room: ${roomID}`);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Error messages\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     // Cleanup listeners on component unmount\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, [username]);\n\n//   // Function: Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       console.log(\"Requesting room creation for:\", username);\n//       socket.emit(\"createRoom\", username);\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Function: Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       console.log(`Requesting to join room ${roomID} as ${username}`);\n//       socket.emit(\"joinRoom\", { roomID, username });\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Function: Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       // Add the message to the sender's local chat history\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n\n//       // Emit the message to the server\n//       socket.emit(\"sendMessage\", { roomID, username, message });\n\n//       // Clear the input field\n//       setMessage(\"\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// // Initialize Socket.IO client\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [email, setEmail] = useState(\"\"); // User's email\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n//   const [isRegistered, setIsRegistered] = useState(false); // Registration status\n//   const [isJoiningRoom, setIsJoiningRoom] = useState(false); // Track if user is joining a room\n\n//   // Listen for incoming events from the backend\n//   useEffect(() => {\n//     // Event: New message received\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       if (newMessage.sender !== username) {\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       }\n//     });\n\n//     // Event: System messages\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     // Event: Room created\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       console.log(\"Room created successfully:\", { roomID, username });\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Room joined\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       console.log(`${username} joined room: ${roomID}`);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Error messages\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     // Cleanup listeners on component unmount\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, [username]);\n\n//   // Function: Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       console.log(\"Requesting room creation for:\", username);\n//       socket.emit(\"createRoom\", username);\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Function: Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       console.log(`Requesting to join room ${roomID} as ${username}`);\n//       socket.emit(\"joinRoom\", { roomID, username });\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Function: Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       // Add the message to the sender's local chat history\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n\n//       // Emit the message to the server\n//       socket.emit(\"sendMessage\", { roomID, username, message });\n\n//       // Clear the input field\n//       setMessage(\"\");\n//     }\n//   };\n\n//   // Handle user registration (Name + Email)\n//   const handleRegistration = () => {\n//     if (username.trim() && email.trim()) {\n//       setIsRegistered(true);\n//     } else {\n//       alert(\"Please enter both name and email!\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isRegistered ? (\n//         // Registration Step\n//         <div className=\"registration-container\">\n//           <h2>Enter Your Details</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <input\n//             type=\"email\"\n//             placeholder=\"Your email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//           />\n//           <button onClick={handleRegistration}>Submit</button>\n//         </div>\n//       ) : !isInRoom ? (\n//         // Room creation / joining Step\n//         <div className=\"room-container\">\n//           <h2>Enter Your Room</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter room name\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//             disabled={isJoiningRoom} // Disable room ID input if joining room\n//           />\n//           <div className=\"room-buttons\">\n//             <button\n//               onClick={createRoom}\n//               disabled={isJoiningRoom}\n//               className=\"room-button\"\n//             >\n//               Create Room\n//             </button>\n//             <button\n//               onClick={() => setIsJoiningRoom(true)}\n//               disabled={createdRoomID}\n//               className=\"room-button\"\n//             >\n//               Join Room\n//             </button>\n//           </div>\n\n//           {/* If user is joining, show the join button */}\n//           {isJoiningRoom && (\n//             <div>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Room ID\"\n//                 value={roomID}\n//                 onChange={(e) => setRoomID(e.target.value)}\n//               />\n//               <button onClick={joinRoom}>Join Room</button>\n//             </div>\n//           )}\n//         </div>\n//       ) : (\n//         // Chat Room Step\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n\n\n// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [isSignup, setIsSignup] = useState(false); // Track if user clicked signup\n//   const [isLogin, setIsLogin] = useState(false); // Track if user clicked login\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [email, setEmail] = useState(\"\"); // User's email\n//   const [password, setPassword] = useState(\"\"); // User's password\n\n//   // Handle signup submission\n//   const handleSignupSubmit = () => {\n//     if (username.trim() && email.trim() && password.trim()) {\n//       alert(`Signup successful for ${username}!`);\n//       // Reset fields\n//       setUsername(\"\");\n//       setEmail(\"\");\n//       setPassword(\"\");\n//       setIsSignup(false);\n//     } else {\n//       alert(\"Please fill all fields for Signup!\");\n//     }\n//   };\n\n//   // Handle login submission\n//   const handleLoginSubmit = () => {\n//     if (username.trim() && email.trim()) {\n//       alert(`Login successful for ${username}!`);\n//       // Reset fields\n//       setUsername(\"\");\n//       setEmail(\"\");\n//       setIsLogin(false);\n//     } else {\n//       alert(\"Please fill all fields for Login!\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isSignup && !isLogin ? (\n//         // Initial Welcome Screen\n//         <div className=\"welcome-container\">\n//           <h1>Welcome to ChatApp</h1>\n//           <div className=\"button-group\">\n//             <button onClick={() => setIsSignup(true)}>Signup</button>\n//             <button onClick={() => setIsLogin(true)}>Login</button>\n//           </div>\n//         </div>\n//       ) : isSignup ? (\n//         // Signup Screen\n//         <div className=\"form-container\">\n//           <h2>Signup</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <input\n//             type=\"email\"\n//             placeholder=\"Enter your email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//           />\n//           <input\n//             type=\"password\"\n//             placeholder=\"Enter your password\"\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//           />\n//           <button onClick={handleSignupSubmit}>Submit</button>\n//         </div>\n//       ) : (\n//         // Login Screen\n//         <div className=\"form-container\">\n//           <h2>Login</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <input\n//             type=\"email\"\n//             placeholder=\"Enter your email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//           />\n//           <button onClick={handleLoginSubmit}>Submit</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n\n// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [isSignup, setIsSignup] = useState(false);\n//   const [isLogin, setIsLogin] = useState(false);\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [username, setUsername] = useState(\"\");\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [activeUser, setActiveUser] = useState(null);\n//   const [message, setMessage] = useState(\"\");\n//   const [messages, setMessages] = useState({});\n//   const users = [\"Piyush\", \"Ankita\", \"Charlie\", \"David\", \"Jerry\"]; // Dummy user list\n\n//   // Handle signup submission\n//   const handleSignupSubmit = () => {\n//     if (username.trim() && email.trim() && password.trim()) {\n//       alert(`Signup successful for ${username}!`);\n//       setIsSignup(false);\n//     } else {\n//       alert(\"Please fill all fields for Signup!\");\n//     }\n//   };\n\n//   // Handle login submission\n//   const handleLoginSubmit = () => {\n//     if (username.trim() && email.trim()) {\n//       alert(`Login successful for ${username}!`);\n//       setIsLoggedIn(true);\n//       setIsLogin(false);\n//     } else {\n//       alert(\"Please fill all fields for Login!\");\n//     }\n//   };\n\n//   // Handle sending a message\n//   const handleSendMessage = () => {\n//     if (message.trim() && activeUser) {\n//       setMessages((prevMessages) => ({\n//         ...prevMessages,\n//         [activeUser]: [...(prevMessages[activeUser] || []), { sender: \"You\", text: message }],\n//       }));\n//       setMessage(\"\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isLoggedIn ? (\n//         <>\n//           {!isSignup && !isLogin ? (\n//             <div className=\"welcome-container\">\n//               <h1>Welcome to ChatApp</h1>\n//               <div className=\"button-group\">\n//                 <button onClick={() => setIsSignup(true)}>Signup</button>\n//                 <button onClick={() => setIsLogin(true)}>Login</button>\n//               </div>\n//             </div>\n//           ) : isSignup ? (\n//             <div className=\"form-container\">\n//               <h2>Signup</h2>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Enter your name\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//               />\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"Enter your email\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//               <input\n//                 type=\"password\"\n//                 placeholder=\"Enter your password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//               />\n//               <button onClick={handleSignupSubmit}>Submit</button>\n//             </div>\n//           ) : (\n//             <div className=\"form-container\">\n//               <h2>Login</h2>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Enter your name\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//               />\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"Enter your email\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//               <button onClick={handleLoginSubmit}>Submit</button>\n//             </div>\n//           )}\n//         </>\n//       ) : (\n//         <div className=\"main-container\">\n//           <div className=\"user-list\">\n//             <h3>Users</h3>\n//             {users.map((user) => (\n//               <div\n//                 key={user}\n//                 className={`user ${activeUser === user ? \"active\" : \"\"}`}\n//                 onClick={() => setActiveUser(user)}\n//               >\n//                 {user}\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"chat-screen\">\n//             {activeUser ? (\n//               <>\n//                 <h3>Chat with {activeUser}</h3>\n//                 <div className=\"messages\">\n//                   {(messages[activeUser] || []).map((msg, index) => (\n//                     <div key={index} className={msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\"}>\n//                       <strong>{msg.sender}:</strong> {msg.text}\n//                     </div>\n//                   ))}\n//                 </div>\n//                 <div className=\"chat-input\">\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Type a message\"\n//                     value={message}\n//                     onChange={(e) => setMessage(e.target.value)}\n//                   />\n//                   <div className=\"chat-button\">\n//                       <button onClick={handleSendMessage}>Send</button>\n//                   </div>\n//                 </div>\n//               </>\n//             ) : (\n//               <h3>Select a user to start chatting</h3>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n\n\n// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [isSignup, setIsSignup] = useState(false);\n//   const [isLogin, setIsLogin] = useState(false);\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [username, setUsername] = useState(\"\");\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [activeUser, setActiveUser] = useState(null);\n//   const [message, setMessage] = useState(\"\");\n//   const [messages, setMessages] = useState({});\n//   const [groupName, setGroupName] = useState(\"\");\n//   const [selectedUsers, setSelectedUsers] = useState([]);\n//   const [groups, setGroups] = useState([]);\n//   const [isCreatingGroup, setIsCreatingGroup] = useState(false);\n\n//   const users = [\"Piyush\", \"Ankita\", \"Charlie\", \"David\", \"Jerry\"]; // Dummy user list\n\n//   // Handle signup submission\n//   const handleSignupSubmit = () => {\n//     if (username.trim() && email.trim() && password.trim()) {\n//       alert(`Signup successful for ${username}!`);\n//       setIsSignup(false);\n//     } else {\n//       alert(\"Please fill all fields for Signup!\");\n//     }\n//   };\n\n//   // Handle login submission\n//   const handleLoginSubmit = () => {\n//     if (username.trim() && email.trim()) {\n//       alert(`Login successful for ${username}!`);\n//       setIsLoggedIn(true);\n//       setIsLogin(false);\n//     } else {\n//       alert(\"Please fill all fields for Login!\");\n//     }\n//   };\n\n//   // Handle sending a message\n//   const handleSendMessage = () => {\n//     if (message.trim() && (activeUser || groups.length > 0)) {\n//       const target = activeUser || groups[activeUser]; // If no active user, chat in group\n//       setMessages((prevMessages) => ({\n//         ...prevMessages,\n//         [target]: [...(prevMessages[target] || []), { sender: \"You\", text: message }],\n//       }));\n//       setMessage(\"\");\n//     }\n//   };\n\n//   // Handle group creation\n//   const handleCreateGroup = () => {\n//     if (groupName.trim() && selectedUsers.length > 0) {\n//       const newGroup = { groupName, users: selectedUsers };\n//       setGroups([...groups, newGroup]);\n//       setIsCreatingGroup(false);\n//       setGroupName(\"\");\n//       setSelectedUsers([]);\n//     } else {\n//       alert(\"Please provide a group name and select users.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isLoggedIn ? (\n//         <>\n//           {!isSignup && !isLogin ? (\n//             <div className=\"welcome-container\">\n//               <h1>Welcome to ChatApp</h1>\n//               <div className=\"button-group\">\n//                 <button onClick={() => setIsSignup(true)}>Signup</button>\n//                 <button onClick={() => setIsLogin(true)}>Login</button>\n//               </div>\n//             </div>\n//           ) : isSignup ? (\n//             <div className=\"form-container\">\n//               <h2>Signup</h2>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Enter your name\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//               />\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"Enter your email\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//               <input\n//                 type=\"password\"\n//                 placeholder=\"Enter your password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//               />\n//               <button onClick={handleSignupSubmit}>Submit</button>\n//             </div>\n//           ) : (\n//             <div className=\"form-container\">\n//               <h2>Login</h2>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Enter your name\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//               />\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"Enter your email\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//               <button onClick={handleLoginSubmit}>Submit</button>\n//             </div>\n//           )}\n//         </>\n//       ) : (\n//         <div className=\"main-container\">\n//           <div className=\"user-list\">\n//             <h3>Users</h3>\n//             {users.map((user) => (\n//               <div\n//                 key={user}\n//                 className={`user ${activeUser === user ? \"active\" : \"\"}`}\n//                 onClick={() => setActiveUser(user)}\n//               >\n//                 {user}\n//               </div>\n//             ))}\n//             <button onClick={() => setIsCreatingGroup(true)}>Create Group</button>\n//           </div>\n//           <div className=\"chat-screen\">\n//             {isCreatingGroup && (\n//               <div className=\"group-creation\">\n//                 <h3>Create a Group</h3>\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Group Name\"\n//                   value={groupName}\n//                   onChange={(e) => setGroupName(e.target.value)}\n//                 />\n//                 <div className=\"user-selection\">\n//                   {users.map((user) => (\n//                     <div key={user}>\n//                       <input\n//                         type=\"checkbox\"\n//                         checked={selectedUsers.includes(user)}\n//                         onChange={() =>\n//                           setSelectedUsers((prev) =>\n//                             prev.includes(user)\n//                               ? prev.filter((u) => u !== user)\n//                               : [...prev, user]\n//                           )\n//                         }\n//                       />\n//                       {user}\n//                     </div>\n//                   ))}\n//                 </div>\n//                 <button onClick={handleCreateGroup}>Create Group</button>\n//               </div>\n//             )}\n\n//             {activeUser || groups.length > 0 ? (\n//               <>\n//                 <h3>{activeUser ? `Chat with ${activeUser}` : \"Chat in Group\"}</h3>\n//                 <div className=\"messages\">\n//                   {(messages[activeUser] || []).map((msg, index) => (\n//                     <div key={index} className={msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\"}>\n//                       <strong>{msg.sender}:</strong> {msg.text}\n//                     </div>\n//                   ))}\n//                 </div>\n//                 <div className=\"chat-input\">\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Type a message\"\n//                     value={message}\n//                     onChange={(e) => setMessage(e.target.value)}\n//                   />\n//                   <div className=\"chat-button\">\n//                     <button onClick={handleSendMessage}>Send</button>\n//                   </div>\n//                 </div>\n//               </>\n//             ) : (\n//               <h3>Select a user or group to start chatting</h3>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n\n\nimport React, { useState } from \"react\";\nimport \"./ChatApp.css\";\n\nconst ChatApp = () => {\n  const [isSignup, setIsSignup] = useState(false);\n  const [isLogin, setIsLogin] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [activeUser, setActiveUser] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState({});\n  const [groupName, setGroupName] = useState(\"\");\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [isCreatingGroup, setIsCreatingGroup] = useState(false);\n\n  const users = [\"Piyush\", \"Ankita\", \"Charlie\", \"David\", \"Jerry\"]; // Dummy user list\n\n  // Handle signup submission\n  const handleSignupSubmit = () => {\n    if (username.trim() && email.trim() && password.trim()) {\n      alert(`Signup successful for ${username}!`);\n      setIsSignup(false);\n    } else {\n      alert(\"Please fill all fields for Signup!\");\n    }\n  };\n\n  // Handle login submission\n  const handleLoginSubmit = () => {\n    if (username.trim() && email.trim()) {\n      alert(`Login successful for ${username}!`);\n      setIsLoggedIn(true);\n      setIsLogin(false);\n    } else {\n      alert(\"Please fill all fields for Login!\");\n    }\n  };\n\n  // Handle sending a message\n  const handleSendMessage = () => {\n    if (message.trim() && activeUser) {\n      setMessages((prevMessages) => ({\n        ...prevMessages,\n        [activeUser]: [...(prevMessages[activeUser] || []), { sender: \"You\", text: message }],\n      }));\n      setMessage(\"\");\n    }\n  };\n\n  // Handle group creation\n  const handleCreateGroup = () => {\n    if (groupName.trim() && selectedUsers.length > 0) {\n      const newGroup = { groupName, users: selectedUsers };\n      setGroups([...groups, newGroup]);\n      setIsCreatingGroup(false);\n      setGroupName(\"\");\n      setSelectedUsers([]);\n    } else {\n      alert(\"Please provide a group name and select users.\");\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      {!isLoggedIn ? (\n        <>\n          {!isSignup && !isLogin ? (\n            <div className=\"welcome-container\">\n              <h1>Welcome to ChatApp</h1>\n              <div className=\"button-group\">\n                <button onClick={() => setIsSignup(true)}>Signup</button>\n                <button onClick={() => setIsLogin(true)}>Login</button>\n              </div>\n            </div>\n          ) : isSignup ? (\n            <div className=\"form-container\">\n              <h2>Signup</h2>\n              <input\n                type=\"text\"\n                placeholder=\"Enter your name\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n              />\n              <input\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n              <button onClick={handleSignupSubmit}>Submit</button>\n            </div>\n          ) : (\n            <div className=\"form-container\">\n              <h2>Login</h2>\n              <input\n                type=\"text\"\n                placeholder=\"Enter your name\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n              />\n              <input\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              <button onClick={handleLoginSubmit}>Submit</button>\n            </div>\n          )}\n        </>\n      ) : (\n        <div className=\"main-container\">\n          <div className=\"user-list\">\n            <button className=\"create-group-button\" onClick={() => setIsCreatingGroup(true)}>\n              Create Group\n            </button>\n            <h3>Users</h3>\n            {users.map((user) => (\n              <div\n                key={user}\n                className={`user ${activeUser === user ? \"active\" : \"\"}`}\n                onClick={() => setActiveUser(user)}\n              >\n                {user}\n              </div>\n            ))}\n            {groups.map((group, index) => (\n              <div\n                key={index}\n                className={`user ${activeUser === group.groupName ? \"active\" : \"\"}`}\n                onClick={() => setActiveUser(group.groupName)}\n              >\n                {group.groupName} (Group)\n              </div>\n            ))}\n          </div>\n          <div className=\"chat-screen\">\n            {isCreatingGroup && (\n              <div className=\"group-creation\">\n                <h3>Create a Group</h3>\n                <input\n                  type=\"text\"\n                  placeholder=\"Group Name\"\n                  value={groupName}\n                  onChange={(e) => setGroupName(e.target.value)}\n                />\n                <div className=\"user-selection\">\n                  {users.map((user) => (\n                    <div key={user}>\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedUsers.includes(user)}\n                        onChange={() =>\n                          setSelectedUsers((prev) =>\n                            prev.includes(user)\n                              ? prev.filter((u) => u !== user)\n                              : [...prev, user]\n                          )\n                        }\n                      />\n                      {user}\n                    </div>\n                  ))}\n                </div>\n                <button onClick={handleCreateGroup}>Create Group</button>\n              </div>\n            )}\n            {activeUser ? (\n              <>\n                <h3>Chat with {activeUser}</h3>\n                <div className=\"messages\">\n                  {(messages[activeUser] || []).map((msg, index) => (\n                    <div key={index} className={msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\"}>\n                      <strong>{msg.sender}:</strong> {msg.text}\n                    </div>\n                  ))}\n                </div>\n                <div className=\"chat-input\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Type a message\"\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                  />\n                  <button onClick={handleSendMessage}>Send</button>\n                </div>\n              </>\n            ) : (\n              <h3>Select a user or group to start chatting</h3>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatApp;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvB,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACmB,UAAU,EAAEC,aAAa,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACqB,OAAO,E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}