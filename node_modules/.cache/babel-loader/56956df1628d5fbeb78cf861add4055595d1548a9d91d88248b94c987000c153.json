{"ast":null,"code":"var _jsxFileName = \"/Users/hipl/Documents/Tasks/chatApp/chatFrontend/my-app/src/ChatApp.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input ka state\n//   const [messages, setMessages] = useState([]); // Messages list ka state\n\n//   // Message send karne ka function\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, message]); // Message ko list me add karo\n//       setMessage(\"\"); // Input field ko clear karo\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat with John Doe</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\nimport React, { useState, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport \"./ChatApp.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:4000\"); // Connect to the backend server\n\nconst ChatApp = () => {\n  _s();\n  const [message, setMessage] = useState(\"\"); // Input message state\n  const [messages, setMessages] = useState([]); // Messages list state\n\n  // Load initial messages from the backend\n  useEffect(() => {\n    fetch(\"http://localhost:4000/api\").then(response => response.json()).then(data => setMessages(data.messages || [])).catch(err => console.error(\"Error fetching messages:\", err));\n  }, []);\n\n  // Listen for incoming messages via Socket.IO\n  useEffect(() => {\n    socket.on(\"messageResponse\", data => {\n      setMessages(prevMessages => [...prevMessages, JSON.parse(data)]);\n    });\n    return () => {\n      socket.off(\"messageResponse\");\n    };\n  }, []);\n\n  // Function to send a new message\n  const sendMessage = () => {\n    if (message.trim()) {\n      const messageData = JSON.stringify({\n        text: message,\n        timestamp: Date.now()\n      });\n      socket.emit(\"message\", messageData); // Send message to the backend\n      setMessage(\"\"); // Clear the input field\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Chat with John Doe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message message-sender\",\n        children: [msg.text, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"timestamp\",\n          children: new Date(msg.timestamp).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 24\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"ZU+5KnV2ObbsnxuqRPvrH125wYk=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","ChatApp","_s","message","setMessage","messages","setMessages","fetch","then","response","json","data","catch","err","console","error","on","prevMessages","JSON","parse","off","sendMessage","trim","messageData","stringify","text","timestamp","Date","now","emit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","toLocaleTimeString","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/hipl/Documents/Tasks/chatApp/chatFrontend/my-app/src/ChatApp.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input ka state\n//   const [messages, setMessages] = useState([]); // Messages list ka state\n\n//   // Message send karne ka function\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, message]); // Message ko list me add karo\n//       setMessage(\"\"); // Input field ko clear karo\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat with John Doe</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\nimport React, { useState, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport \"./ChatApp.css\";\n\nconst socket = io(\"http://localhost:4000\"); // Connect to the backend server\n\nconst ChatApp = () => {\n  const [message, setMessage] = useState(\"\"); // Input message state\n  const [messages, setMessages] = useState([]); // Messages list state\n\n  // Load initial messages from the backend\n  useEffect(() => {\n    fetch(\"http://localhost:4000/api\")\n      .then((response) => response.json())\n      .then((data) => setMessages(data.messages || []))\n      .catch((err) => console.error(\"Error fetching messages:\", err));\n  }, []);\n\n  // Listen for incoming messages via Socket.IO\n  useEffect(() => {\n    socket.on(\"messageResponse\", (data) => {\n      setMessages((prevMessages) => [...prevMessages, JSON.parse(data)]);\n    });\n\n    return () => {\n      socket.off(\"messageResponse\");\n    };\n  }, []);\n\n  // Function to send a new message\n  const sendMessage = () => {\n    if (message.trim()) {\n      const messageData = JSON.stringify({ text: message, timestamp: Date.now() });\n      socket.emit(\"message\", messageData); // Send message to the backend\n      setMessage(\"\"); // Clear the input field\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      {/* Chat Header */}\n      <div className=\"chat-header\">\n        <h2>Chat with John Doe</h2>\n      </div>\n\n      {/* Messages Display */}\n      <div className=\"chat-messages\">\n        {messages.map((msg, index) => (\n          <div key={index} className=\"message message-sender\">\n            {msg.text} <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString()}</span>\n          </div>\n        ))}\n      </div>\n\n      {/* Input and Send Button */}\n      <div className=\"chat-input\">\n        <input\n          type=\"text\"\n          placeholder=\"Type your message...\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n        />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}