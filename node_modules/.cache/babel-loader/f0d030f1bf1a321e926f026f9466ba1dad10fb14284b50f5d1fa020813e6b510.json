{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { io } from 'socket.io-client';\n// import './ChatRoomPage.css';  // Importing the CSS for styling\n\n// // Replace with your actual backend URL\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatRoomPage = ({ roomID, username }) => {\n//   const [message, setMessage] = useState('');\n//   const [messages, setMessages] = useState([]);\n\n//   // Listen for incoming messages when the component is mounted\n//   useEffect(() => {\n//     socket.on('receiveMessage', (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, newMessage]);\n//     });\n\n//     // Cleanup listener when component is unmounted\n//     return () => {\n//       socket.off('receiveMessage');\n//     };\n//   }, []);\n\n//   // Handle sending a message\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       const newMessage = {\n//         sender: username,\n//         text: message,\n//         roomID: roomID,\n//       };\n\n//       // Emit the message to the server\n//       socket.emit('sendMessage', newMessage);\n\n//       // Add the message to local state (for immediate display)\n//       setMessages((prevMessages) => [...prevMessages, newMessage]);\n\n//       // Clear the input field\n//       setMessage('');\n//     }\n//   };\n\n//   // Handle the Enter key press to send the message\n//   const handleKeyPress = (e) => {\n//     if (e.key === 'Enter') {\n//       sendMessage();\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-room-container\">\n//       {/* Header */}\n//       <div className=\"chat-room-header\">\n//         <h2>Room: {roomID}</h2>\n//         <p>ID: {roomID}</p>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"chat-message\">\n//             <strong>{msg.sender}:</strong> {msg.text}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input Field */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type a message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           onKeyDown={handleKeyPress}  // Listen for Enter key press\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatRoomPage;","map":{"version":3,"names":[],"sources":["/Users/hipl/Documents/Tasks/chatApp/chatFrontend/my-app/src/ChatRoomPage.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { io } from 'socket.io-client';\n// import './ChatRoomPage.css';  // Importing the CSS for styling\n\n// // Replace with your actual backend URL\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatRoomPage = ({ roomID, username }) => {\n//   const [message, setMessage] = useState('');\n//   const [messages, setMessages] = useState([]);\n\n//   // Listen for incoming messages when the component is mounted\n//   useEffect(() => {\n//     socket.on('receiveMessage', (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, newMessage]);\n//     });\n\n//     // Cleanup listener when component is unmounted\n//     return () => {\n//       socket.off('receiveMessage');\n//     };\n//   }, []);\n\n//   // Handle sending a message\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       const newMessage = {\n//         sender: username,\n//         text: message,\n//         roomID: roomID,\n//       };\n\n//       // Emit the message to the server\n//       socket.emit('sendMessage', newMessage);\n\n//       // Add the message to local state (for immediate display)\n//       setMessages((prevMessages) => [...prevMessages, newMessage]);\n\n//       // Clear the input field\n//       setMessage('');\n//     }\n//   };\n\n//   // Handle the Enter key press to send the message\n//   const handleKeyPress = (e) => {\n//     if (e.key === 'Enter') {\n//       sendMessage();\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-room-container\">\n//       {/* Header */}\n//       <div className=\"chat-room-header\">\n//         <h2>Room: {roomID}</h2>\n//         <p>ID: {roomID}</p>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"chat-message\">\n//             <strong>{msg.sender}:</strong> {msg.text}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input Field */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type a message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           onKeyDown={handleKeyPress}  // Listen for Enter key press\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatRoomPage;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}