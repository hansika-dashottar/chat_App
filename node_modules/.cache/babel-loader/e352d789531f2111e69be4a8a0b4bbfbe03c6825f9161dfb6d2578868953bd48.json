{"ast":null,"code":"var _jsxFileName = \"/Users/hipl/Documents/Tasks/chatApp/chatFrontend/my-app/src/ChatApp.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input ka state\n//   const [messages, setMessages] = useState([]); // Messages list ka state\n\n//   // Message send karne ka function\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, message]); // Message ko list me add karo\n//       setMessage(\"\"); // Input field ko clear karo\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat with John Doe</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to the backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Input message state\n//   const [messages, setMessages] = useState([]); // Messages list state\n\n//   // Load initial messages from the backend\n//   useEffect(() => {\n//     fetch(\"http://localhost:4000/api\")\n//       .then((response) => response.json())\n//       .then((data) => setMessages(data.messages || []))\n//       .catch((err) => console.error(\"Error fetching messages:\", err));\n//   }, []);\n\n//   // Listen for incoming messages via Socket.IO\n//   useEffect(() => {\n//     socket.on(\"messageResponse\", (data) => {\n//       console.log(data)\n//       setMessages((prevMessages) => [...prevMessages, JSON.parse(data)]);\n//     });\n\n//     return () => {\n//       socket.off(\"messageResponse\");\n//     };\n//   }, []);\n\n//   // Function to send a new message\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       const messageData = JSON.stringify({ text: message, timestamp: Date.now()});\n//       socket.emit(\"message\", messageData); // Send message to the backend\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat Application</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg.text} <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString()}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"Other\", text: newMessage }]);\n//     });\n\n//     // Clean up the listener when component unmounts\n//     return () => socket.off(\"receiveMessage\");\n//   }, []);\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"You\", text: message }]);\n//       socket.emit(\"sendMessage\", message); // Emit message to the server\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">\n//         <h2>Basic Chat App</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className={msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\"}>\n//             <strong>{msg.sender}:</strong> {msg.text}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\");\n\n// const ChatApp = () => {\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID input\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"Other\", text: newMessage },\n//       ]);\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//     };\n//   }, []);\n\n//   // Join a room\n//   const joinRoom = () => {\n//     if (roomID.trim()) {\n//       socket.emit(\"joinRoom\", roomID);\n//       setIsInRoom(true); // Mark user as in a room\n//     }\n//   };\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n//       socket.emit(\"sendMessage\", { roomID, message }); // Emit message with room ID\n//       setMessage(\"\"); // Clear input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Room ID</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\nimport React, { useState, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport \"./ChatApp.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:4000\");\nconst ChatApp = () => {\n  _s();\n  const [roomID, setRoomID] = useState(\"\"); // Room ID input\n  const [message, setMessage] = useState(\"\"); // Message input\n  const [messages, setMessages] = useState([]); // Chat history\n  const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n  const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Track created room ID\n\n  // Listen for incoming messages\n  useEffect(() => {\n    socket.on(\"receiveMessage\", newMessage => {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"Other\",\n        text: newMessage.text\n      }]);\n    });\n    socket.on(\"message\", systemMessage => {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"System\",\n        text: systemMessage\n      }]);\n    });\n    socket.on(\"roomCreated\", newRoomID => {\n      setCreatedRoomID(newRoomID);\n      setRoomID(newRoomID); // Auto-set the created Room ID\n      setIsInRoom(true);\n      console.log(`Room created with ID: ${newRoomID}`);\n    });\n    return () => {\n      socket.off(\"receiveMessage\");\n      socket.off(\"message\");\n      socket.off(\"roomCreated\");\n    };\n  }, []);\n\n  // Create a new room\n  const createRoom = () => {\n    socket.emit(\"createRoom\"); // Request the server to create a room\n  };\n\n  // Join an existing room\n  const joinRoom = () => {\n    if (roomID.trim()) {\n      socket.emit(\"joinRoom\", roomID);\n      setIsInRoom(true);\n    }\n  };\n\n  // Send message to the server\n  const sendMessage = () => {\n    if (message.trim() && roomID.trim()) {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"You\",\n        text: message\n      }]);\n      socket.emit(\"sendMessage\", {\n        roomID,\n        message\n      }); // Emit message with room ID\n      setMessage(\"\"); // Clear input field\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: !isInRoom ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create or Join a Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createRoom,\n        children: \"Create Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this), createdRoomID && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Room Created: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: createdRoomID\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Room ID to Join\",\n        value: roomID,\n        onChange: e => setRoomID(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: joinRoom,\n        children: \"Join Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Room: \", roomID]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: msg.sender === \"You\" ? \"message-sender\" : msg.sender === \"System\" ? \"message-system\" : \"message-receiver\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.sender, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 17\n          }, this), \" \", msg.text]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          value: message,\n          onChange: e => setMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 355,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"TXNwVYyUEWU4AXE9c+AGErCo5Ow=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","ChatApp","_s","roomID","setRoomID","message","setMessage","messages","setMessages","isInRoom","setIsInRoom","createdRoomID","setCreatedRoomID","on","newMessage","prevMessages","sender","text","systemMessage","newRoomID","console","log","off","createRoom","emit","joinRoom","trim","sendMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","map","msg","index","_c","$RefreshReg$"],"sources":["/Users/hipl/Documents/Tasks/chatApp/chatFrontend/my-app/src/ChatApp.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input ka state\n//   const [messages, setMessages] = useState([]); // Messages list ka state\n\n//   // Message send karne ka function\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, message]); // Message ko list me add karo\n//       setMessage(\"\"); // Input field ko clear karo\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat with John Doe</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to the backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Input message state\n//   const [messages, setMessages] = useState([]); // Messages list state\n\n//   // Load initial messages from the backend\n//   useEffect(() => {\n//     fetch(\"http://localhost:4000/api\")\n//       .then((response) => response.json())\n//       .then((data) => setMessages(data.messages || []))\n//       .catch((err) => console.error(\"Error fetching messages:\", err));\n//   }, []);\n\n//   // Listen for incoming messages via Socket.IO\n//   useEffect(() => {\n//     socket.on(\"messageResponse\", (data) => {\n//       console.log(data)\n//       setMessages((prevMessages) => [...prevMessages, JSON.parse(data)]);\n//     });\n\n//     return () => {\n//       socket.off(\"messageResponse\");\n//     };\n//   }, []);\n\n//   // Function to send a new message\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       const messageData = JSON.stringify({ text: message, timestamp: Date.now()});\n//       socket.emit(\"message\", messageData); // Send message to the backend\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat Application</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg.text} <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString()}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"Other\", text: newMessage }]);\n//     });\n\n//     // Clean up the listener when component unmounts\n//     return () => socket.off(\"receiveMessage\");\n//   }, []);\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"You\", text: message }]);\n//       socket.emit(\"sendMessage\", message); // Emit message to the server\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">\n//         <h2>Basic Chat App</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className={msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\"}>\n//             <strong>{msg.sender}:</strong> {msg.text}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\");\n\n// const ChatApp = () => {\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID input\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"Other\", text: newMessage },\n//       ]);\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//     };\n//   }, []);\n\n//   // Join a room\n//   const joinRoom = () => {\n//     if (roomID.trim()) {\n//       socket.emit(\"joinRoom\", roomID);\n//       setIsInRoom(true); // Mark user as in a room\n//     }\n//   };\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n//       socket.emit(\"sendMessage\", { roomID, message }); // Emit message with room ID\n//       setMessage(\"\"); // Clear input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Room ID</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\nimport React, { useState, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport \"./ChatApp.css\";\n\nconst socket = io(\"http://localhost:4000\");\n\nconst ChatApp = () => {\n  const [roomID, setRoomID] = useState(\"\"); // Room ID input\n  const [message, setMessage] = useState(\"\"); // Message input\n  const [messages, setMessages] = useState([]); // Chat history\n  const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n  const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Track created room ID\n\n  // Listen for incoming messages\n  useEffect(() => {\n    socket.on(\"receiveMessage\", (newMessage) => {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { sender: \"Other\", text: newMessage.text },\n      ]);\n    });\n\n    socket.on(\"message\", (systemMessage) => {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { sender: \"System\", text: systemMessage },\n      ]);\n    });\n\n    socket.on(\"roomCreated\", (newRoomID) => {\n      setCreatedRoomID(newRoomID);\n      setRoomID(newRoomID); // Auto-set the created Room ID\n      setIsInRoom(true);\n      console.log(`Room created with ID: ${newRoomID}`);\n    });\n\n    return () => {\n      socket.off(\"receiveMessage\");\n      socket.off(\"message\");\n      socket.off(\"roomCreated\");\n    };\n  }, []);\n\n  // Create a new room\n  const createRoom = () => {\n    socket.emit(\"createRoom\"); // Request the server to create a room\n  };\n\n  // Join an existing room\n  const joinRoom = () => {\n    if (roomID.trim()) {\n      socket.emit(\"joinRoom\", roomID);\n      setIsInRoom(true);\n    }\n  };\n\n  // Send message to the server\n  const sendMessage = () => {\n    if (message.trim() && roomID.trim()) {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { sender: \"You\", text: message },\n      ]);\n      socket.emit(\"sendMessage\", { roomID, message }); // Emit message with room ID\n      setMessage(\"\"); // Clear input field\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      {!isInRoom ? (\n        <div className=\"room-container\">\n          <h2>Create or Join a Room</h2>\n          <button onClick={createRoom}>Create Room</button>\n          {createdRoomID && (\n            <p>\n              Room Created: <strong>{createdRoomID}</strong>\n            </p>\n          )}\n          <input\n            type=\"text\"\n            placeholder=\"Enter Room ID to Join\"\n            value={roomID}\n            onChange={(e) => setRoomID(e.target.value)}\n          />\n          <button onClick={joinRoom}>Join Room</button>\n        </div>\n      ) : (\n        <>\n          <div className=\"chat-header\">\n            <h2>Room: {roomID}</h2>\n          </div>\n\n          <div className=\"chat-messages\">\n            {messages.map((msg, index) => (\n              <div\n                key={index}\n                className={\n                  msg.sender === \"You\"\n                    ? \"message-sender\"\n                    : msg.sender === \"System\"\n                    ? \"message-system\"\n                    : \"message-receiver\"\n                }\n              >\n                <strong>{msg.sender}:</strong> {msg.text}\n              </div>\n            ))}\n          </div>\n\n          <div className=\"chat-input\">\n            <input\n              type=\"text\"\n              placeholder=\"Type your message...\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n            />\n            <button onClick={sendMessage}>Send</button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ChatApp;\n\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}