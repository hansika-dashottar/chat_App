{"ast":null,"code":"var _jsxFileName = \"/Users/hipl/Documents/Tasks/chatApp/chatFrontend/my-app/src/ChatApp.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input ka state\n//   const [messages, setMessages] = useState([]); // Messages list ka state\n\n//   // Message send karne ka function\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, message]); // Message ko list me add karo\n//       setMessage(\"\"); // Input field ko clear karo\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat with John Doe</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to the backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Input message state\n//   const [messages, setMessages] = useState([]); // Messages list state\n\n//   // Load initial messages from the backend\n//   useEffect(() => {\n//     fetch(\"http://localhost:4000/api\")\n//       .then((response) => response.json())\n//       .then((data) => setMessages(data.messages || []))\n//       .catch((err) => console.error(\"Error fetching messages:\", err));\n//   }, []);\n\n//   // Listen for incoming messages via Socket.IO\n//   useEffect(() => {\n//     socket.on(\"messageResponse\", (data) => {\n//       console.log(data)\n//       setMessages((prevMessages) => [...prevMessages, JSON.parse(data)]);\n//     });\n\n//     return () => {\n//       socket.off(\"messageResponse\");\n//     };\n//   }, []);\n\n//   // Function to send a new message\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       const messageData = JSON.stringify({ text: message, timestamp: Date.now()});\n//       socket.emit(\"message\", messageData); // Send message to the backend\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat Application</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg.text} <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString()}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\nimport React, { useState, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport \"./ChatApp.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:4000\");\nconst ChatApp = () => {\n  _s();\n  const [username, setUsername] = useState(\"\"); // Current user's name\n  const [users, setUsers] = useState({}); // Active users list\n  const [receiverId, setReceiverId] = useState(\"\"); // Selected user to chat with\n  const [message, setMessage] = useState(\"\"); // Message to send\n  const [messages, setMessages] = useState([]); // All messages\n\n  // Register the user\n  useEffect(() => {\n    const name = prompt(\"Enter your username:\");\n    setUsername(name);\n    socket.emit(\"register\", name);\n  }, []);\n\n  // Load messages and active users\n  useEffect(() => {\n    socket.on(\"users\", activeUsers => setUsers(activeUsers));\n    socket.on(\"messageResponse\", newMessage => {\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n    });\n  }, []);\n\n  // Send message\n  const sendMessage = () => {\n    if (message.trim() && receiverId) {\n      const messageData = {\n        text: message,\n        receiverId\n      };\n      socket.emit(\"message\", messageData);\n      setMessage(\"\"); // Clear input field\n    } else {\n      alert(\"Select a user to send the message!\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Chat Application\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Logged in as: \", username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-users\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Active Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Object.entries(users).map(([id, name]) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => setReceiverId(id),\n          style: {\n            fontWeight: receiverId === id ? \"bold\" : \"normal\",\n            cursor: \"pointer\"\n          },\n          children: [name, \" \", id === socket.id ? \"(You)\" : \"\"]\n        }, id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.senderId === socket.id ? \"message-sender\" : \"message-receiver\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [msg.text, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: new Date(msg.timestamp).toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"TSB5uyChLB9wsZJgIPOAt/Ph2OA=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","ChatApp","_s","username","setUsername","users","setUsers","receiverId","setReceiverId","message","setMessage","messages","setMessages","name","prompt","emit","on","activeUsers","newMessage","prevMessages","sendMessage","trim","messageData","text","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","id","onClick","style","fontWeight","cursor","msg","index","senderId","Date","timestamp","toLocaleTimeString","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/hipl/Documents/Tasks/chatApp/chatFrontend/my-app/src/ChatApp.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input ka state\n//   const [messages, setMessages] = useState([]); // Messages list ka state\n\n//   // Message send karne ka function\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, message]); // Message ko list me add karo\n//       setMessage(\"\"); // Input field ko clear karo\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat with John Doe</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to the backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Input message state\n//   const [messages, setMessages] = useState([]); // Messages list state\n\n//   // Load initial messages from the backend\n//   useEffect(() => {\n//     fetch(\"http://localhost:4000/api\")\n//       .then((response) => response.json())\n//       .then((data) => setMessages(data.messages || []))\n//       .catch((err) => console.error(\"Error fetching messages:\", err));\n//   }, []);\n\n//   // Listen for incoming messages via Socket.IO\n//   useEffect(() => {\n//     socket.on(\"messageResponse\", (data) => {\n//       console.log(data)\n//       setMessages((prevMessages) => [...prevMessages, JSON.parse(data)]);\n//     });\n\n//     return () => {\n//       socket.off(\"messageResponse\");\n//     };\n//   }, []);\n\n//   // Function to send a new message\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       const messageData = JSON.stringify({ text: message, timestamp: Date.now()});\n//       socket.emit(\"message\", messageData); // Send message to the backend\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat Application</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg.text} <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString()}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\nimport React, { useState, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport \"./ChatApp.css\";\n\nconst socket = io(\"http://localhost:4000\");\n\nconst ChatApp = () => {\n  const [username, setUsername] = useState(\"\"); // Current user's name\n  const [users, setUsers] = useState({}); // Active users list\n  const [receiverId, setReceiverId] = useState(\"\"); // Selected user to chat with\n  const [message, setMessage] = useState(\"\"); // Message to send\n  const [messages, setMessages] = useState([]); // All messages\n\n  // Register the user\n  useEffect(() => {\n    const name = prompt(\"Enter your username:\");\n    setUsername(name);\n    socket.emit(\"register\", name);\n  }, []);\n\n  // Load messages and active users\n  useEffect(() => {\n    socket.on(\"users\", (activeUsers) => setUsers(activeUsers));\n    socket.on(\"messageResponse\", (newMessage) => {\n      setMessages((prevMessages) => [...prevMessages, newMessage]);\n    });\n  }, []);\n\n  // Send message\n  const sendMessage = () => {\n    if (message.trim() && receiverId) {\n      const messageData = {\n        text: message,\n        receiverId,\n      };\n      socket.emit(\"message\", messageData);\n      setMessage(\"\"); // Clear input field\n    } else {\n      alert(\"Select a user to send the message!\");\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-header\">\n        <h2>Chat Application</h2>\n        <p>Logged in as: {username}</p>\n      </div>\n\n      <div className=\"chat-users\">\n        <h3>Active Users</h3>\n        <ul>\n          {Object.entries(users).map(([id, name]) => (\n            <li\n              key={id}\n              onClick={() => setReceiverId(id)}\n              style={{\n                fontWeight: receiverId === id ? \"bold\" : \"normal\",\n                cursor: \"pointer\",\n              }}\n            >\n              {name} {id === socket.id ? \"(You)\" : \"\"}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"chat-messages\">\n        <h3>Messages</h3>\n        {messages.map((msg, index) => (\n          <div\n            key={index}\n            className={msg.senderId === socket.id ? \"message-sender\" : \"message-receiver\"}\n          >\n            <p>\n              {msg.text}{\" \"}\n              <span>{new Date(msg.timestamp).toLocaleTimeString()}</span>\n            </p>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"chat-input\">\n        <input\n          type=\"text\"\n          placeholder=\"Type your message...\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n        />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}