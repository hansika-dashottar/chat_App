{"ast":null,"code":"var _jsxFileName = \"/Users/hipl/Documents/Tasks/chatApp/chatFrontend/my-app/src/ChatApp.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input ka state\n//   const [messages, setMessages] = useState([]); // Messages list ka state\n\n//   // Message send karne ka function\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, message]); // Message ko list me add karo\n//       setMessage(\"\"); // Input field ko clear karo\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat with John Doe</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to the backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Input message state\n//   const [messages, setMessages] = useState([]); // Messages list state\n\n//   // Load initial messages from the backend\n//   useEffect(() => {\n//     fetch(\"http://localhost:4000/api\")\n//       .then((response) => response.json())\n//       .then((data) => setMessages(data.messages || []))\n//       .catch((err) => console.error(\"Error fetching messages:\", err));\n//   }, []);\n\n//   // Listen for incoming messages via Socket.IO\n//   useEffect(() => {\n//     socket.on(\"messageResponse\", (data) => {\n//       console.log(data)\n//       setMessages((prevMessages) => [...prevMessages, JSON.parse(data)]);\n//     });\n\n//     return () => {\n//       socket.off(\"messageResponse\");\n//     };\n//   }, []);\n\n//   // Function to send a new message\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       const messageData = JSON.stringify({ text: message, timestamp: Date.now()});\n//       socket.emit(\"message\", messageData); // Send message to the backend\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat Application</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg.text} <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString()}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"Other\", text: newMessage }]);\n//     });\n\n//     // Clean up the listener when component unmounts\n//     return () => socket.off(\"receiveMessage\");\n//   }, []);\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"You\", text: message }]);\n//       socket.emit(\"sendMessage\", message); // Emit message to the server\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">\n//         <h2>Basic Chat App</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className={msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\"}>\n//             <strong>{msg.sender}:</strong> {msg.text}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\");\n\n// const ChatApp = () => {\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID input\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"Other\", text: newMessage },\n//       ]);\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//     };\n//   }, []);\n\n//   // Join a room\n//   const joinRoom = () => {\n//     if (roomID.trim()) {\n//       socket.emit(\"joinRoom\", roomID);\n//       setIsInRoom(true); // Mark user as in a room\n//     }\n//   };\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n//       socket.emit(\"sendMessage\", { roomID, message }); // Emit message with room ID\n//       setMessage(\"\"); // Clear input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Room ID</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, newMessage]);\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} created room with ID: ${roomID}`);\n//     });\n\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} joined room: ${roomID}`);\n//     });\n\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, []);\n\n//   // Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       socket.emit(\"createRoom\", username); // Request the server to create a room\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       socket.emit(\"joinRoom\", { roomID, username }); // Request to join the room\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       socket.emit(\"sendMessage\", { roomID, username, message }); // Send message to the server\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n//       setMessage(\"\"); // Clear input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n//Important\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       // Prevent adding the sender's message again\n//       if (newMessage.sender !== username) {\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       }\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} created room with ID: ${roomID}`);\n//     });\n\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} joined room: ${roomID}`);\n//     });\n\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, [username]);\n\n//   // Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       socket.emit(\"createRoom\", username); // Request the server to create a room\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       socket.emit(\"joinRoom\", { roomID, username }); // Request to join the room\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       // Add the message to the sender's local chat history\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n\n//       // Emit the message to the server\n//       socket.emit(\"sendMessage\", { roomID, username, message });\n\n//       // Clear the input field\n//       setMessage(\"\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n//---------------Important-----------------//\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// // Initialize Socket.IO client\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming events from the backend\n//   useEffect(() => {\n//     // Event: New message received\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       if (newMessage.sender !== username) {\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       }\n//     });\n\n//     // Event: System messages\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     // Event: Room created\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       console.log(\"Room created successfully:\", { roomID, username });\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Room joined\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       console.log(`${username} joined room: ${roomID}`);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Error messages\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     // Cleanup listeners on component unmount\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, [username]);\n\n//   // Function: Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       console.log(\"Requesting room creation for:\", username);\n//       socket.emit(\"createRoom\", username);\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Function: Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       console.log(`Requesting to join room ${roomID} as ${username}`);\n//       socket.emit(\"joinRoom\", { roomID, username });\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Function: Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       // Add the message to the sender's local chat history\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n\n//       // Emit the message to the server\n//       socket.emit(\"sendMessage\", { roomID, username, message });\n\n//       // Clear the input field\n//       setMessage(\"\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// // Initialize Socket.IO client\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [email, setEmail] = useState(\"\"); // User's email\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n//   const [isRegistered, setIsRegistered] = useState(false); // Registration status\n//   const [isJoiningRoom, setIsJoiningRoom] = useState(false); // Track if user is joining a room\n\n//   // Listen for incoming events from the backend\n//   useEffect(() => {\n//     // Event: New message received\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       if (newMessage.sender !== username) {\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       }\n//     });\n\n//     // Event: System messages\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     // Event: Room created\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       console.log(\"Room created successfully:\", { roomID, username });\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Room joined\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       console.log(`${username} joined room: ${roomID}`);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Error messages\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     // Cleanup listeners on component unmount\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, [username]);\n\n//   // Function: Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       console.log(\"Requesting room creation for:\", username);\n//       socket.emit(\"createRoom\", username);\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Function: Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       console.log(`Requesting to join room ${roomID} as ${username}`);\n//       socket.emit(\"joinRoom\", { roomID, username });\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Function: Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       // Add the message to the sender's local chat history\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n\n//       // Emit the message to the server\n//       socket.emit(\"sendMessage\", { roomID, username, message });\n\n//       // Clear the input field\n//       setMessage(\"\");\n//     }\n//   };\n\n//   // Handle user registration (Name + Email)\n//   const handleRegistration = () => {\n//     if (username.trim() && email.trim()) {\n//       setIsRegistered(true);\n//     } else {\n//       alert(\"Please enter both name and email!\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isRegistered ? (\n//         // Registration Step\n//         <div className=\"registration-container\">\n//           <h2>Enter Your Details</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <input\n//             type=\"email\"\n//             placeholder=\"Your email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//           />\n//           <button onClick={handleRegistration}>Submit</button>\n//         </div>\n//       ) : !isInRoom ? (\n//         // Room creation / joining Step\n//         <div className=\"room-container\">\n//           <h2>Enter Your Room</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter room name\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//             disabled={isJoiningRoom} // Disable room ID input if joining room\n//           />\n//           <div className=\"room-buttons\">\n//             <button\n//               onClick={createRoom}\n//               disabled={isJoiningRoom}\n//               className=\"room-button\"\n//             >\n//               Create Room\n//             </button>\n//             <button\n//               onClick={() => setIsJoiningRoom(true)}\n//               disabled={createdRoomID}\n//               className=\"room-button\"\n//             >\n//               Join Room\n//             </button>\n//           </div>\n\n//           {/* If user is joining, show the join button */}\n//           {isJoiningRoom && (\n//             <div>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Room ID\"\n//                 value={roomID}\n//                 onChange={(e) => setRoomID(e.target.value)}\n//               />\n//               <button onClick={joinRoom}>Join Room</button>\n//             </div>\n//           )}\n//         </div>\n//       ) : (\n//         // Chat Room Step\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\nimport React, { useState, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport \"./ChatApp.css\";\n\n// Initialize Socket.IO client\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://192.168.101.32:4000\");\nconst ChatApp = () => {\n  _s();\n  const [username, setUsername] = useState(\"\"); // User's name\n  const [email, setEmail] = useState(\"\"); // User's email\n  const [roomID, setRoomID] = useState(\"\"); // Room ID\n  const [roomName, setRoomName] = useState(\"\"); // Room name for creating a new room\n  const [message, setMessage] = useState(\"\"); // Message input\n  const [messages, setMessages] = useState([]); // Chat history\n  const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n  const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n  const [isDetailsEntered, setIsDetailsEntered] = useState(false); // Track if username/email are entered\n\n  // Listen for incoming events from the backend\n  useEffect(() => {\n    socket.on(\"receiveMessage\", newMessage => {\n      if (newMessage.sender !== username) {\n        setMessages(prevMessages => [...prevMessages, newMessage]);\n      }\n    });\n    socket.on(\"message\", systemMessage => {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"System\",\n        text: systemMessage\n      }]);\n    });\n    socket.on(\"roomCreated\", ({\n      roomID,\n      username\n    }) => {\n      console.log(\"Room created successfully:\", {\n        roomID,\n        username\n      });\n      setCreatedRoomID(roomID);\n      setRoomID(roomID);\n      setIsInRoom(true);\n    });\n    socket.on(\"roomJoined\", ({\n      roomID,\n      username\n    }) => {\n      console.log(`${username} joined room: ${roomID}`);\n      setRoomID(roomID);\n      setIsInRoom(true);\n    });\n    socket.on(\"errorMessage\", error => {\n      alert(error);\n    });\n    return () => {\n      socket.off(\"receiveMessage\");\n      socket.off(\"message\");\n      socket.off(\"roomCreated\");\n      socket.off(\"roomJoined\");\n      socket.off(\"errorMessage\");\n    };\n  }, [username]);\n\n  // Function: Create a new room\n  const createRoom = () => {\n    if (username.trim() && roomName.trim()) {\n      console.log(\"Requesting room creation for:\", username);\n      socket.emit(\"createRoom\", {\n        username,\n        roomName\n      }); // Send roomName to server\n    } else {\n      alert(\"Please enter your name and a room name.\");\n    }\n  };\n\n  // Function: Join an existing room\n  const joinRoom = () => {\n    if (username.trim() && roomID.trim()) {\n      console.log(`Requesting to join room ${roomID} as ${username}`);\n      socket.emit(\"joinRoom\", {\n        roomID,\n        username\n      });\n    } else {\n      alert(\"Please enter your name and room ID.\");\n    }\n  };\n\n  // Function: Send a message\n  const sendMessage = () => {\n    if (message.trim() && roomID.trim()) {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"You\",\n        text: message\n      }]);\n      socket.emit(\"sendMessage\", {\n        roomID,\n        username,\n        message\n      });\n      setMessage(\"\");\n    }\n  };\n\n  // Handle the first page form submission\n  const handleDetailsSubmit = () => {\n    if (username.trim() && email.trim()) {\n      setIsDetailsEntered(true);\n    } else {\n      alert(\"Please enter both username and email.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: !isDetailsEntered ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"details-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enter Your Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1089,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Your name\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1090,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Your email\",\n        value: email,\n        onChange: e => setEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1096,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDetailsSubmit,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1088,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Second Page: Room creation/joining\n    _jsxDEV(\"div\", {\n      className: \"room-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Welcome, \", username, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Choose a Room Action\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Create a Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1112,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter Room Name\",\n          value: roomName,\n          onChange: e => setRoomName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: createRoom,\n          children: \"Create Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1119,\n          columnNumber: 13\n        }, this), createdRoomID && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Room Created: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: createdRoomID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1122,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1121,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Or Join an Existing Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1128,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Room ID\",\n        value: roomID,\n        onChange: e => setRoomID(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: joinRoom,\n        children: \"Join Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1135,\n        columnNumber: 11\n      }, this), isInRoom && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Room: \", roomID]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1141,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Logged in as: \", username]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1142,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1140,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: msg.sender === \"You\" ? \"message-sender\" : msg.sender === \"System\" ? \"message-system\" : \"message-receiver\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [msg.sender, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1157,\n              columnNumber: 21\n            }, this), \" \", msg.text]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1147,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1145,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type your message...\",\n            value: message,\n            onChange: e => setMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1163,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: sendMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1169,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1162,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1106,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1085,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"ZpqwETfzTXh2TQxxU2Y2mdx28aw=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","ChatApp","_s","username","setUsername","email","setEmail","roomID","setRoomID","roomName","setRoomName","message","setMessage","messages","setMessages","isInRoom","setIsInRoom","createdRoomID","setCreatedRoomID","isDetailsEntered","setIsDetailsEntered","on","newMessage","sender","prevMessages","systemMessage","text","console","log","error","alert","off","createRoom","trim","emit","joinRoom","sendMessage","handleDetailsSubmit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","msg","index","_c","$RefreshReg$"],"sources":["/Users/hipl/Documents/Tasks/chatApp/chatFrontend/my-app/src/ChatApp.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import \"./ChatApp.css\";\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input ka state\n//   const [messages, setMessages] = useState([]); // Messages list ka state\n\n//   // Message send karne ka function\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, message]); // Message ko list me add karo\n//       setMessage(\"\"); // Input field ko clear karo\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat with John Doe</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to the backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Input message state\n//   const [messages, setMessages] = useState([]); // Messages list state\n\n//   // Load initial messages from the backend\n//   useEffect(() => {\n//     fetch(\"http://localhost:4000/api\")\n//       .then((response) => response.json())\n//       .then((data) => setMessages(data.messages || []))\n//       .catch((err) => console.error(\"Error fetching messages:\", err));\n//   }, []);\n\n//   // Listen for incoming messages via Socket.IO\n//   useEffect(() => {\n//     socket.on(\"messageResponse\", (data) => {\n//       console.log(data)\n//       setMessages((prevMessages) => [...prevMessages, JSON.parse(data)]);\n//     });\n\n//     return () => {\n//       socket.off(\"messageResponse\");\n//     };\n//   }, []);\n\n//   // Function to send a new message\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       const messageData = JSON.stringify({ text: message, timestamp: Date.now()});\n//       socket.emit(\"message\", messageData); // Send message to the backend\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {/* Chat Header */}\n//       <div className=\"chat-header\">\n//         <h2>Chat Application</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message message-sender\">\n//             {msg.text} <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString()}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\"); // Connect to backend server\n\n// const ChatApp = () => {\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"Other\", text: newMessage }]);\n//     });\n\n//     // Clean up the listener when component unmounts\n//     return () => socket.off(\"receiveMessage\");\n//   }, []);\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, { sender: \"You\", text: message }]);\n//       socket.emit(\"sendMessage\", message); // Emit message to the server\n//       setMessage(\"\"); // Clear the input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">\n//         <h2>Basic Chat App</h2>\n//       </div>\n\n//       {/* Messages Display */}\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className={msg.sender === \"You\" ? \"message-sender\" : \"message-receiver\"}>\n//             <strong>{msg.sender}:</strong> {msg.text}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input and Send Button */}\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\");\n\n// const ChatApp = () => {\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID input\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"Other\", text: newMessage },\n//       ]);\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//     };\n//   }, []);\n\n//   // Join a room\n//   const joinRoom = () => {\n//     if (roomID.trim()) {\n//       socket.emit(\"joinRoom\", roomID);\n//       setIsInRoom(true); // Mark user as in a room\n//     }\n//   };\n\n//   // Send message to the server\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n//       socket.emit(\"sendMessage\", { roomID, message }); // Emit message with room ID\n//       setMessage(\"\"); // Clear input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Room ID</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://localhost:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       setMessages((prevMessages) => [...prevMessages, newMessage]);\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} created room with ID: ${roomID}`);\n//     });\n\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} joined room: ${roomID}`);\n//     });\n\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, []);\n\n//   // Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       socket.emit(\"createRoom\", username); // Request the server to create a room\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       socket.emit(\"joinRoom\", { roomID, username }); // Request to join the room\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       socket.emit(\"sendMessage\", { roomID, username, message }); // Send message to the server\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n//       setMessage(\"\"); // Clear input field\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n//Important\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming messages\n//   useEffect(() => {\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       // Prevent adding the sender's message again\n//       if (newMessage.sender !== username) {\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       }\n//     });\n\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} created room with ID: ${roomID}`);\n//     });\n\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//       console.log(`${username} joined room: ${roomID}`);\n//     });\n\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, [username]);\n\n//   // Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       socket.emit(\"createRoom\", username); // Request the server to create a room\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       socket.emit(\"joinRoom\", { roomID, username }); // Request to join the room\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       // Add the message to the sender's local chat history\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n\n//       // Emit the message to the server\n//       socket.emit(\"sendMessage\", { roomID, username, message });\n\n//       // Clear the input field\n//       setMessage(\"\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n\n//---------------Important-----------------//\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// // Initialize Socket.IO client\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n\n//   // Listen for incoming events from the backend\n//   useEffect(() => {\n//     // Event: New message received\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       if (newMessage.sender !== username) {\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       }\n//     });\n\n//     // Event: System messages\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     // Event: Room created\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       console.log(\"Room created successfully:\", { roomID, username });\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Room joined\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       console.log(`${username} joined room: ${roomID}`);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Error messages\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     // Cleanup listeners on component unmount\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, [username]);\n\n//   // Function: Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       console.log(\"Requesting room creation for:\", username);\n//       socket.emit(\"createRoom\", username);\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Function: Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       console.log(`Requesting to join room ${roomID} as ${username}`);\n//       socket.emit(\"joinRoom\", { roomID, username });\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Function: Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       // Add the message to the sender's local chat history\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n\n//       // Emit the message to the server\n//       socket.emit(\"sendMessage\", { roomID, username, message });\n\n//       // Clear the input field\n//       setMessage(\"\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isInRoom ? (\n//         <div className=\"room-container\">\n//           <h2>Enter Your Name</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <button onClick={createRoom}>Create Room</button>\n//           {createdRoomID && (\n//             <p>\n//               Room Created: <strong>{createdRoomID}</strong>\n//             </p>\n//           )}\n//           <h3>Or Join an Existing Room</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Room ID\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//           />\n//           <button onClick={joinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n\n\n// import React, { useState, useEffect } from \"react\";\n// import { io } from \"socket.io-client\";\n// import \"./ChatApp.css\";\n\n// // Initialize Socket.IO client\n// const socket = io(\"http://192.168.101.32:4000\");\n\n// const ChatApp = () => {\n//   const [username, setUsername] = useState(\"\"); // User's name\n//   const [email, setEmail] = useState(\"\"); // User's email\n//   const [roomID, setRoomID] = useState(\"\"); // Room ID\n//   const [message, setMessage] = useState(\"\"); // Message input\n//   const [messages, setMessages] = useState([]); // Chat history\n//   const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n//   const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n//   const [isRegistered, setIsRegistered] = useState(false); // Registration status\n//   const [isJoiningRoom, setIsJoiningRoom] = useState(false); // Track if user is joining a room\n\n//   // Listen for incoming events from the backend\n//   useEffect(() => {\n//     // Event: New message received\n//     socket.on(\"receiveMessage\", (newMessage) => {\n//       if (newMessage.sender !== username) {\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       }\n//     });\n\n//     // Event: System messages\n//     socket.on(\"message\", (systemMessage) => {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"System\", text: systemMessage },\n//       ]);\n//     });\n\n//     // Event: Room created\n//     socket.on(\"roomCreated\", ({ roomID, username }) => {\n//       console.log(\"Room created successfully:\", { roomID, username });\n//       setCreatedRoomID(roomID);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Room joined\n//     socket.on(\"roomJoined\", ({ roomID, username }) => {\n//       console.log(`${username} joined room: ${roomID}`);\n//       setRoomID(roomID);\n//       setIsInRoom(true);\n//     });\n\n//     // Event: Error messages\n//     socket.on(\"errorMessage\", (error) => {\n//       alert(error);\n//     });\n\n//     // Cleanup listeners on component unmount\n//     return () => {\n//       socket.off(\"receiveMessage\");\n//       socket.off(\"message\");\n//       socket.off(\"roomCreated\");\n//       socket.off(\"roomJoined\");\n//       socket.off(\"errorMessage\");\n//     };\n//   }, [username]);\n\n//   // Function: Create a new room\n//   const createRoom = () => {\n//     if (username.trim()) {\n//       console.log(\"Requesting room creation for:\", username);\n//       socket.emit(\"createRoom\", username);\n//     } else {\n//       alert(\"Please enter your name first.\");\n//     }\n//   };\n\n//   // Function: Join an existing room\n//   const joinRoom = () => {\n//     if (username.trim() && roomID.trim()) {\n//       console.log(`Requesting to join room ${roomID} as ${username}`);\n//       socket.emit(\"joinRoom\", { roomID, username });\n//     } else {\n//       alert(\"Please enter your name and room ID.\");\n//     }\n//   };\n\n//   // Function: Send a message\n//   const sendMessage = () => {\n//     if (message.trim() && roomID.trim()) {\n//       // Add the message to the sender's local chat history\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: \"You\", text: message },\n//       ]);\n\n//       // Emit the message to the server\n//       socket.emit(\"sendMessage\", { roomID, username, message });\n\n//       // Clear the input field\n//       setMessage(\"\");\n//     }\n//   };\n\n//   // Handle user registration (Name + Email)\n//   const handleRegistration = () => {\n//     if (username.trim() && email.trim()) {\n//       setIsRegistered(true);\n//     } else {\n//       alert(\"Please enter both name and email!\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       {!isRegistered ? (\n//         // Registration Step\n//         <div className=\"registration-container\">\n//           <h2>Enter Your Details</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Your name\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <input\n//             type=\"email\"\n//             placeholder=\"Your email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//           />\n//           <button onClick={handleRegistration}>Submit</button>\n//         </div>\n//       ) : !isInRoom ? (\n//         // Room creation / joining Step\n//         <div className=\"room-container\">\n//           <h2>Enter Your Room</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter room name\"\n//             value={roomID}\n//             onChange={(e) => setRoomID(e.target.value)}\n//             disabled={isJoiningRoom} // Disable room ID input if joining room\n//           />\n//           <div className=\"room-buttons\">\n//             <button\n//               onClick={createRoom}\n//               disabled={isJoiningRoom}\n//               className=\"room-button\"\n//             >\n//               Create Room\n//             </button>\n//             <button\n//               onClick={() => setIsJoiningRoom(true)}\n//               disabled={createdRoomID}\n//               className=\"room-button\"\n//             >\n//               Join Room\n//             </button>\n//           </div>\n\n//           {/* If user is joining, show the join button */}\n//           {isJoiningRoom && (\n//             <div>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Room ID\"\n//                 value={roomID}\n//                 onChange={(e) => setRoomID(e.target.value)}\n//               />\n//               <button onClick={joinRoom}>Join Room</button>\n//             </div>\n//           )}\n//         </div>\n//       ) : (\n//         // Chat Room Step\n//         <>\n//           <div className=\"chat-header\">\n//             <h2>Room: {roomID}</h2>\n//             <p>Logged in as: {username}</p>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={\n//                   msg.sender === \"You\"\n//                     ? \"message-sender\"\n//                     : msg.sender === \"System\"\n//                     ? \"message-system\"\n//                     : \"message-receiver\"\n//                 }\n//               >\n//                 <strong>{msg.sender}:</strong> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Type your message...\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatApp;\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport \"./ChatApp.css\";\n\n// Initialize Socket.IO client\nconst socket = io(\"http://192.168.101.32:4000\");\n\nconst ChatApp = () => {\n  const [username, setUsername] = useState(\"\"); // User's name\n  const [email, setEmail] = useState(\"\"); // User's email\n  const [roomID, setRoomID] = useState(\"\"); // Room ID\n  const [roomName, setRoomName] = useState(\"\"); // Room name for creating a new room\n  const [message, setMessage] = useState(\"\"); // Message input\n  const [messages, setMessages] = useState([]); // Chat history\n  const [isInRoom, setIsInRoom] = useState(false); // Track if user is in a room\n  const [createdRoomID, setCreatedRoomID] = useState(\"\"); // Store generated room ID\n  const [isDetailsEntered, setIsDetailsEntered] = useState(false); // Track if username/email are entered\n\n  // Listen for incoming events from the backend\n  useEffect(() => {\n    socket.on(\"receiveMessage\", (newMessage) => {\n      if (newMessage.sender !== username) {\n        setMessages((prevMessages) => [...prevMessages, newMessage]);\n      }\n    });\n\n    socket.on(\"message\", (systemMessage) => {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { sender: \"System\", text: systemMessage },\n      ]);\n    });\n\n    socket.on(\"roomCreated\", ({ roomID, username }) => {\n      console.log(\"Room created successfully:\", { roomID, username });\n      setCreatedRoomID(roomID);\n      setRoomID(roomID);\n      setIsInRoom(true);\n    });\n\n    socket.on(\"roomJoined\", ({ roomID, username }) => {\n      console.log(`${username} joined room: ${roomID}`);\n      setRoomID(roomID);\n      setIsInRoom(true);\n    });\n\n    socket.on(\"errorMessage\", (error) => {\n      alert(error);\n    });\n\n    return () => {\n      socket.off(\"receiveMessage\");\n      socket.off(\"message\");\n      socket.off(\"roomCreated\");\n      socket.off(\"roomJoined\");\n      socket.off(\"errorMessage\");\n    };\n  }, [username]);\n\n  // Function: Create a new room\n  const createRoom = () => {\n    if (username.trim() && roomName.trim()) {\n      console.log(\"Requesting room creation for:\", username);\n      socket.emit(\"createRoom\", { username, roomName }); // Send roomName to server\n    } else {\n      alert(\"Please enter your name and a room name.\");\n    }\n  };\n\n  // Function: Join an existing room\n  const joinRoom = () => {\n    if (username.trim() && roomID.trim()) {\n      console.log(`Requesting to join room ${roomID} as ${username}`);\n      socket.emit(\"joinRoom\", { roomID, username });\n    } else {\n      alert(\"Please enter your name and room ID.\");\n    }\n  };\n\n  // Function: Send a message\n  const sendMessage = () => {\n    if (message.trim() && roomID.trim()) {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { sender: \"You\", text: message },\n      ]);\n\n      socket.emit(\"sendMessage\", { roomID, username, message });\n      setMessage(\"\");\n    }\n  };\n\n  // Handle the first page form submission\n  const handleDetailsSubmit = () => {\n    if (username.trim() && email.trim()) {\n      setIsDetailsEntered(true);\n    } else {\n      alert(\"Please enter both username and email.\");\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      {/* First Page: Username and Email form */}\n      {!isDetailsEntered ? (\n        <div className=\"details-container\">\n          <h2>Enter Your Details</h2>\n          <input\n            type=\"text\"\n            placeholder=\"Your name\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          <input\n            type=\"email\"\n            placeholder=\"Your email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          />\n          <button onClick={handleDetailsSubmit}>Next</button>\n        </div>\n      ) : (\n        // Second Page: Room creation/joining\n        <div className=\"room-container\">\n          <h2>Welcome, {username}!</h2>\n          <h3>Choose a Room Action</h3>\n\n          {/* Room creation form */}\n          <div>\n            <h4>Create a Room</h4>\n            <input\n              type=\"text\"\n              placeholder=\"Enter Room Name\"\n              value={roomName}\n              onChange={(e) => setRoomName(e.target.value)}\n            />\n            <button onClick={createRoom}>Create Room</button>\n            {createdRoomID && (\n              <p>\n                Room Created: <strong>{createdRoomID}</strong>\n              </p>\n            )}\n          </div>\n\n          {/* Room joining form */}\n          <h3>Or Join an Existing Room</h3>\n          <input\n            type=\"text\"\n            placeholder=\"Room ID\"\n            value={roomID}\n            onChange={(e) => setRoomID(e.target.value)}\n          />\n          <button onClick={joinRoom}>Join Room</button>\n\n          {/* Room chat if already in room */}\n          {isInRoom && (\n            <>\n              <div className=\"chat-header\">\n                <h2>Room: {roomID}</h2>\n                <p>Logged in as: {username}</p>\n              </div>\n\n              <div className=\"chat-messages\">\n                {messages.map((msg, index) => (\n                  <div\n                    key={index}\n                    className={\n                      msg.sender === \"You\"\n                        ? \"message-sender\"\n                        : msg.sender === \"System\"\n                        ? \"message-system\"\n                        : \"message-receiver\"\n                    }\n                  >\n                    <strong>{msg.sender}:</strong> {msg.text}\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"chat-input\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Type your message...\"\n                  value={message}\n                  onChange={(e) => setMessage(e.target.value)}\n                />\n                <button onClick={sendMessage}>Send</button>\n              </div>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatApp;\n\n\n\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAO,eAAe;;AAEtB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,MAAM,GAAGL,EAAE,CAAC,4BAA4B,CAAC;AAE/C,MAAMM,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}